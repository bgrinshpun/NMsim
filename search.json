[{"path":"https://philipdelff.github.io/NMsim/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-DataCreate.html","id":"a-basic-simulation-data-set","dir":"Articles","previous_headings":"","what":"A basic simulation data set","title":"Creation of Simulation Data Sets","text":"long simulation data set data.frame structure columns values compatible Nonmem model(s) simulated, matter NMsim created. However, NMsim NMdata provide powerful methods easily create data sets. example create regimen loading dose 300 mg followed 150 QD 6 days. dose compartment 1, want simulate samples second compartment. numbers depend model data set intended used . NMcreateDoses() flexible function creates dosing records based concise syntax. add label regimen right away. Now add sample records using addEVID2(). dat.sim now valid simulation data set one subject. However, even though addEVID2() try order data meaningful way, recommended always manually order data set. use data.table’s setorder(). dplyr::arrange can just well used. row identifier (counter) can make post-processing easier, add . NMsim include plotting functionality, simple way show dosing amounts sample times. NMdata::NMexpandDoses() used expand doses coded ADDL/II order get data row plot dose. also take sum amounts time point case doses simultaneous.  brief overview number events broken event type EVID dose amount AMT: Showing top five rows understanding data now looks like. Notice following issues: Data contains mix numeric non-numeric columns Columns sorted Nonmem-friendly style non-numeric columns right Finally, check simulation data set various potential issues Nonmem data sets using NMdata::NMcheckData summarize number doses observations:","code":"### multiple dose regimens with loading are easily created with NMcreateDoses too ## We use ADDL+II (either method easy) doses <- NMcreateDoses(TIME=c(0,24),AMT=c(300,150),addl=data.frame(ADDL=c(0,5),II=c(0,24)),CMT=1) doses <- transform(doses,trt=\"300 mg then 150 mg QD\") ## Notice, the ID and MDV columns are included doses #>       ID  TIME  EVID   CMT   AMT    II  ADDL   MDV                   trt #>    <int> <num> <num> <num> <num> <num> <num> <num>                <char> #> 1:     1     0     1     1   300     0     0     1 300 mg then 150 mg QD #> 2:     1    24     1     1   150    24     5     1 300 mg then 150 mg QD ## Add simulation records - longer for QD regimens dat.sim <- addEVID2(doses,time.sim=0:(24*7),CMT=2) ## sort data set  setorder(dat.sim,ID,TIME,EVID) ## Adding a row identifier (generally not necessary but recommended) dat.sim$ROW <- 1:nrow(dat.sim) dtplot <- NMdata::NMexpandDoses(dat.sim,as.fun=\"data.table\") dtplot <- dtplot[,.(AMT=sum(AMT)),by=.(ID,CMT,TIME,EVID)]  ggplot(dtplot,aes(TIME,factor(CMT),colour=factor(EVID)))+     geom_point(data=function(x)x[EVID==1],aes(size=AMT))+     geom_point(data=function(x)x[EVID==2],shape=\"|\")+     labs(x=\"Time (hours)\",y=\"Compartment\")+     theme(legend.position=\"bottom\") #>       ID  TIME  EVID   CMT   AMT    II  ADDL   MDV                   trt    DV #>    <int> <num> <num> <num> <num> <num> <num> <num>                <char> <num> #> 1:     1     0     1     1   300     0     0     1 300 mg then 150 mg QD    NA #> 2:     1     0     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 3:     1     1     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 4:     1     2     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 5:     1     3     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #>      ROW #>    <int> #> 1:     1 #> 2:     2 #> 3:     3 #> 4:     4 #> 5:     5 NMdata::NMcheckData(dat.sim,type.data=\"sim\") #> No findings. Great!"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-DataCreate.html","id":"add-time-after-previous-dose-and-related-information","dir":"Articles","previous_headings":"","what":"Add time after previous dose and related information","title":"Creation of Simulation Data Sets","text":"Just like preparation data set observed data, time previous dose may relevant time analyze simulation results . use NMdata::addTAPD() add automatically. something important decide simulations. Notice TAPD sample TIME==0. addTAPD use order data set determine time-order records. default behavior addTAPD treat sample taken exact time dose pre-dose. instead want considered post-dose, specify order EVID numbers. addTAPD uses NMdata::NMexpandDoses make sure dosing times considered. See ?NMdata::addTAPD created columns mean many useful features.","code":"dat.sim2 <- addTAPD(dat.sim) head(dat.sim2) #>       ID  TIME  EVID   CMT   AMT    II  ADDL   MDV                   trt    DV #>    <int> <num> <num> <num> <num> <num> <num> <num>                <char> <num> #> 1:     1     0     1     1   300     0     0     1 300 mg then 150 mg QD    NA #> 2:     1     0     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 3:     1     1     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 4:     1     2     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 5:     1     3     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 6:     1     4     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #>      ROW DOSCUMN TPDOS  TAPD PDOSAMT DOSCUMA #>    <int>   <int> <num> <num>   <num>   <num> #> 1:     1       1     0     0     300     300 #> 2:     2       0    NA    NA      NA       0 #> 3:     3       1     0     1     300     300 #> 4:     4       1     0     2     300     300 #> 5:     5       1     0     3     300     300 #> 6:     6       1     0     4     300     300 ## order.evid=c(1,2) means doses are ordered before EVID=2 records dat.sim2 <- addTAPD(dat.sim,order.evid=c(1,2)) ## now the TIME=0 sample has TAPD=0 head(dat.sim2) #>       ID  TIME  EVID   CMT   AMT    II  ADDL   MDV                   trt    DV #>    <int> <num> <num> <num> <num> <num> <num> <num>                <char> <num> #> 1:     1     0     1     1   300     0     0     1 300 mg then 150 mg QD    NA #> 2:     1     0     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 3:     1     1     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 4:     1     2     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 5:     1     3     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 6:     1     4     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #>      ROW DOSCUMN TPDOS  TAPD PDOSAMT DOSCUMA #>    <int>   <int> <num> <num>   <num>   <num> #> 1:     1       1     0     0     300     300 #> 2:     2       1     0     0     300     300 #> 3:     3       1     0     1     300     300 #> 4:     4       1     0     2     300     300 #> 5:     5       1     0     3     300     300 #> 6:     6       1     0     4     300     300"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-DataCreate.html","id":"multiple-endpoints-e-g--parent-and-metabolite","dir":"Articles","previous_headings":"","what":"Multiple endpoints (e.g. parent and metabolite)","title":"Creation of Simulation Data Sets","text":"Pass data.frame addEVID2’s CMT argument include multiple endpoints.","code":"addEVID2(doses,CMT=data.frame(CMT=c(2,3),DVID=c(\"Parent\",\"Metabolite\")),time.sim=1:2) #>       ID  TIME  EVID   CMT   AMT    II  ADDL   MDV                   trt    DV #>    <int> <num> <num> <num> <num> <num> <num> <num>                <char> <num> #> 1:     1     0     1     1   300     0     0     1 300 mg then 150 mg QD    NA #> 2:     1     1     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 3:     1     1     2     3    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 4:     1     2     2     2    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 5:     1     2     2     3    NA    NA    NA     1 300 mg then 150 mg QD    NA #> 6:     1    24     1     1   150    24     5     1 300 mg then 150 mg QD    NA #>          DVID #>        <char> #> 1:       <NA> #> 2:     Parent #> 3: Metabolite #> 4:     Parent #> 5: Metabolite #> 6:       <NA>"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-DataCreate.html","id":"cohort-dependent-or-individual-sampling-schemes","dir":"Articles","previous_headings":"","what":"Cohort-dependent or individual sampling schemes","title":"Creation of Simulation Data Sets","text":"way CMT argument, time.sim can also data.frame. contains covariate found doses data, added simulation times merged accordingly. can use say cohort identifier, ID allows reuse (parts ) observed sample times.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-DataCreate.html","id":"other-features","dir":"Articles","previous_headings":"","what":"Other features","title":"Creation of Simulation Data Sets","text":"name implies default function use EVID=2 (means neither doses, samples, resetting events) records. want change (maybe EVID=0), use EVID argument.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Simulation with Parameter Uncertainty","text":"vignettes aims enabling use NMsim following purposes sampling successful covariance step using models bootstrap sampling","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"simulation-of-parameter-uncertainty","dir":"Articles","previous_headings":"","what":"Simulation of parameter uncertainty","title":"Simulation with Parameter Uncertainty","text":"already saw NMsim can easily used generate new subjects (say prediction intervals) using -subject -occasion variability described model. may also want simulate uncertainty parameter estimates (say confidence intervals). NMsim supports two different approaches . Simulation based estimated variance-covariance matrix parameters estimated successful $COVARIANCE step Nonmem. method specified argument method.sim=NMsim_VarCov. Simulation based bootstrap model. NMsim bootstrap. bootstrap hand, NMsim() can reuse bootstrapped models simulation. obtained simply running NMsim() multiple estimated models. requires sampled bootstrap models must available. example based results PSN’s bootstrap function. must noted current implementation based $COVARIANCE step simulate $OMEGA $SIGMA parameters correct distribution. typical value simulations, limitation affect results. forest plot example typical subject estimates simulated parameter uncertainty. post-processing involves statistics across simulated populations ($OMEGA) residual error ($SIGMA), method used preliminary analyses. beyond scope vignette describe pros cons two approaches. following examples serve exlain prerequisites using NMsim , get NMsim job.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"simulation-of-parameter-uncertainty-based-on-a-covariance-step","dir":"Articles","previous_headings":"Simulation of parameter uncertainty","what":"Simulation of parameter uncertainty based on a covariance step","title":"Simulation with Parameter Uncertainty","text":"succesful covariance step Nonmem, NMsim can sample models estimated variance-covariance matrix. , NMsim derive confidence intervals based estimated variance-covariance matrix. samples models , can derive desired confidence intervals, whatever need. , shall try get far details , remember . assuming estimated vairance-covariance matrix reliable estimate parameter precision, implying Gaussian distribution parameter uncertainties. reason important understand depending model, can lead samples parameter values beyond allowed range. can lead sampled models fail meaningful. point successful covariance step may sufficient criterion picking approach simulating uncertainty; appropriate parametrization another one. Anyway, getting NMsim work simple : may get messages like “Unable run job” job “allowed run queue”. Counter-intuitively , messages mean job isn’t run. used sge=TRUE means sending 1000 generated jobs queuing system. case, NMsim track execution jobs hence collect results done. Instead returns small data.frame paths simulation output control streams written. check status jobs manually, done, can read results using NMreadSim(): now simulation results 1000 sampled models collected. shall models sampled bootstrap, calculate confidence intervals based methods.","code":"set.seed(552) simlsts.VarCov <- NMsim(     file.mod=file.mod,              ## Path to estimation input control stream     data=dat.sim                    ## simulation input data    ,dir.sims=\"~/NMsim_vignette/tmp\" ## where to store temporary simulation files    ,dir.res=\"simulate-results\"      ## where to store simulation results files    ,table.vars=\"PRED IPRED\"         ## Let Nonmem write a minimum output table    ,method.sim=NMsim_VarCov         ## Var-Cov parameter sampling    ,name.sim=\"VarCov\"               ## a recognizable directory name    ,nsims=500                       ## sampling 500 models    ,sge=TRUE                        ## run simulations in parallel please ) simres.VarCov <- NMreadSim(\"simulate-results/NMsim_xgxr032_VarCov_paths.rds\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"simulation-from-a-bootstrap","dir":"Articles","previous_headings":"Simulation of parameter uncertainty","what":"Simulation from a bootstrap","title":"Simulation with Parameter Uncertainty","text":"approach simulation parameter uncertainty currently provided NMsim simulation bootstrap. , NMsim run bootstrap, simply runs simulation using sampled models bootstrap. fact means don’t even need dedicated method achieve , simply run simulation multiple Nonmem models described begging vignette. used PSN’s bootstrap. can run simulation models way: NMsim keeps column default called model holds model name, derived control stream file name. behavior due NMsim relying functionality implemented NMdata reading writing data. Using NMdata::NMscanData. example, can derive estimated confidence interval population prediction time summarizing across simulation models (samples).","code":"## generate a vector with paths to all the input control streams mods.bootstrap <- list.files(path=file.project(\"nonmem/bs1_032_N1000/m1\"),                              pattern=\".+\\\\.mod$\",full.names = T)  ## number of models to be run ## length(mods.bootstrap)  file.res.bootstrap <- NMsim(     file.mod=mods.bootstrap   ## Estimation input control stream    ,data=dat.sim              ## Simulation input data    ,method.sim=NMsim_default  ## a single simulation with each sampled model    ,dir.sims=\"~/NMsim_vignette/bootstrap\" ## Where to save simulation results    ,file.res=\"simulate-results/simres_bootstrap.rds\"    ,table.vars=\"PRED IPRED\"   ## Let Nonmem write a minimum output table    ,sge=TRUE                  ## run simulations in parallel    ,method.update.inits=\"nmsim\" ) simres.bootstrap <- NMreadSim(\"simulate-results/simres_bootstrap.rds\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-ParamUncertain.html","id":"the-confidence-intervals","dir":"Articles","previous_headings":"Simulation of parameter uncertainty","what":"The confidence intervals","title":"Simulation with Parameter Uncertainty","text":"Derivation confidence intervals identical two methods, using data.table’s feature separate two methods (sampling covariance steps using bootstrap samples). Plotting two next . simple model smooth covariance step two confidence intervals similar. look hard, can see minor differences.","code":"## Stacking results from the two approaches to simulating with ## parameter uncertainty. allres <- rbind(simres.VarCov[,method:=\"Covariance step\"],                 simres.bootstrap[,method:=\"Bootstrap\"],                 fill=TRUE)  ## long format so calculations can be done by prediction type. allresl <- melt(allres[EVID==2],                 measure.vars=c(\"PRED\",\"IPRED\"),                 variable.name=\"pred.type\",                 value.name=\"pred.value\")  ## deriving median by model and time to have a single value per model ## and time point. This is only needed in case multiple subjects are ## simulated by each model. sum.res.model <- allresl[,                          .(predm=median(pred.value))                         ,by=.(method,model,TIME,pred.type)]   sum.uncertain <- sum.res.model[    ,setNames(as.list(quantile(predm,probs=c(.025,.5,.975))),              c(\"predml\",\"predmm\",\"predmu\"))    ,by=.(method,TIME,pred.type)] ggplot(sum.uncertain,aes(x=TIME,fill=pred.type))+     geom_ribbon(aes(ymin=predml,ymax=predmu),alpha=.5)+     geom_line(aes(y=predmm,colour=pred.type))+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\")+     facet_wrap(~method)"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-ResidVar.html","id":"add-residual-variability","dir":"Articles","previous_headings":"","what":"Add residual variability","title":"NMsim - Simulation of residual variability","text":"best way simulate residual variability include estimation control stream described vignette. NMsim currently provide automated way add simulation residual variability Nonmem. provide method simulate residual variability R, based Nonmem parameter estimates. used case one existing Nonmem without residual variability simulated, feasible modify model control stream reason. function called addResVar() supports additive, proportional, combined (additive proportional) error models. can also add residual error log scale (exponential error model). addResVar supports estimation using $SIGMA $THETA (Nonmem). user specify two methods used Nonmem model using par.type argument. thing must specified parameter numbers standard deviations variances. model simulated vignette combined error model estimated using $SIGMA matrix: now specify addResVar find variance proportional component $SIGMA[1,1] one additive component $SIGMA[2,2]. case SIGMA used, -diagonal (covariance) elements $SIGMA matrix also used simulation. par.type=\"THETA\" default assumption thetas represent standard deviation (contrast using par.type=\"SIGMA\"). can modified using scale.par argument. arguments avoid negative observations several features. , last resort.","code":"Y=F+F*ERR(1)+ERR(2) file.mod <- file.project(\"nonmem/xgxr021.mod\")  simres <- NMsim(file.mod=file.mod,                 data=dat.sim) simres.with.resvar <- addResVar(simres,path.ext=fnExtension(file.mod,\"ext\"),par.type=\"SIGMA\",prop=1,add=2)"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-ReuseSimSubjects.html","id":"what-is-a-subject","dir":"Articles","previous_headings":"","what":"What is a subject?","title":"Reuse simulated subjects","text":"refered “subject” really combination ETAs. Covariates must handled user simulation input dataset. also discussed NMsim-known.html.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-ReuseSimSubjects.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"Reuse simulated subjects","text":"Let’s simulate 10,000 ETA combinations store file called xgxr032_simEtas.phi. ’ll just use simulation data set created NMsim-DataCreate.html now can use NMsim_known().","code":"file.project <- function(...)file.path(system.file(\"examples\",package=\"NMsim\"),...) file.mod <- file.project(\"nonmem/xgxr032.mod\") NMsim:::simPopEtas(file.mod=file.mod,                    N=1e4,                    seed=238861,                    file.phi=\"xgxr032_simEtas.phi\"                    ) dat.sim <- read_fst(path=\"simulate-results/dat_sim.fst\",as.data.table=TRUE) dat.sim.multiple <- egdt(dat.sim[,!(\"ID\")],data.table(ID=c(1,4,89))) #>      data nrows ncols #>    <char> <int> <int> #> 1:    dt1   171    10 #> 2:    dt2     3     1 #> 3: result   513    11 setorder(dat.sim.multiple,ID,TIME,EVID) simres <- NMsim(     file.mod=file.mod,     data=dat.sim.multiple,     method.sim=NMsim_known,     file.phi=\"xgxr032_simEtas.phi\",     name.sim=\"reuseSubjs\",     table.vars=\"PRED IPRED\",     path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\",     dir.sims=\"simulate-tmp\",     dir.res=\"simulate-results\" )"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-ReuseSimSubjects.html","id":"simulate-the-same-simulated-subjects-on-multiple-regimens","dir":"Articles","previous_headings":"Example","what":"Simulate the same simulated subjects on multiple regimens","title":"Reuse simulated subjects","text":"","code":"dat.sim.multiple.regs <- lapply(c(100,300,600),function(dose1){     transform(dat.sim.multiple,AMT=AMT/300*dose1,trt=sprintf(\"%d mg then %d mg QD\",dose1,dose1/2)) }) |> rbindlist() dat.sim.multiple.regs[,REC:=.I]"},{"path":[]},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-TypSubj.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Simulation of typical subjects","text":"vignettes aims enabling use NMsim following purposes Simulation typical subjects","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-TypSubj.html","id":"simulation-of-a-typical-subject","dir":"Articles","previous_headings":"","what":"Simulation of a typical subject","title":"Simulation of typical subjects","text":"typical subject understood subject without random effects, .e. ETA’s equal zero. important realize “typical” covariates user still need control model, simulation input data, combination . Getting NMsim run ETA’s equaling zero easy: first simulation used PRED default simulation method get typical subject simulation. work many cases, depends model. way run simulation ETA’s set 0 using method.sim=NMsim_typical.","code":"simres.typ <- NMsim(file.mod=file.mod,                     data=dat.sim,                     name.sim=\"typSubj\",                     method.sim=NMsim_typical) p.typ <- ggplot(simres.typ,aes(TIME,IPRED,color=trt))+geom_line()+     geom_line(aes(y=PRED)) p.typ"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-VPC.html","id":"simulations-for-visual-predictive-checks-vpc","dir":"Articles","previous_headings":"","what":"Simulations for Visual Predictive Checks (VPC)","title":"VPC simulations","text":"vignette shows generate simulations generation VPC plots. NMsim include functionality summarizing quantiles plotting, provides powerful ways obtain simulated data needed. shall see tidyvpc package easily creates VPC plots based simulation results.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-VPC.html","id":"default-option-reuse-estimation-data-for-simulation","dir":"Articles","previous_headings":"","what":"Default option: reuse estimation data for simulation","title":"VPC simulations","text":"Normally, two main arguments NMsim path input control stream (file.mod) simulation input data set (data). leave data argument, NMsim re-use estimation data simulation. simulation need VPC. use example model included NMsim: performed simulation similar one produced VPC function PSN. However, important differences. simulation results automatically read R. table.vars argument allows user narrow variables written disk. can speed simulation considerably reduce amount disk space Nonmem simulation results require. postprocessing results done NMsim. See easily .","code":"file.project <- function(...)file.path(system.file(\"examples\",package=\"NMsim\"),...) file.mod <- file.project(\"nonmem/xgxr032.mod\") NMdataConf(path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\") NMdataConf(dir.sims=\"~/NMsim_vignette\",            dir.res=\"simulate-results\",            allow.unknown=TRUE ## necessary for dir.sims and dir.res            ## until NMdata 0.1.5            ) set.seed(43) ## notice the data argument is not used. simres.vpc <- NMsim(file.mod,                     table.vars=c(\"PRED\",\"IPRED\", \"Y\"),                     name.sim=\"vpc_01\"                    ,subproblems=500                    ,as.fun=\"data.table\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-VPC.html","id":"plotting-using-tidyvpc","dir":"Articles","previous_headings":"","what":"Plotting using tidyvpc","title":"VPC simulations","text":"mentioned, NMsim postprocess simulation generation VPC plot, offter plotting functions. R package called tidyvpc offer two things moreover implemented data.table, ’s fast. following simple code shows get results NMsim VPC plot tidyvpc.","code":"library(ggplot2) library(tidyvpc) #> tidyvpc is part of Certara.R! #> Follow the link below to learn more about PMx R package development at Certara. #> https://certara.github.io/R-Certara/ library(NMdata) ## read the data as it was used in the Nonmem model res <- NMscanData(file.mod,as.fun=\"data.table\",quiet=TRUE) ## only plot observation events from estimation data set data.obs <- res[EVID==0] ## Only plot simulated observation events data.sim <- simres.vpc[EVID==0]  ## run vpc vpc1 <-     observed(data.obs, x = TIME, y = DV) |>     simulated(data.sim, y = Y) |>     stratify(~DOSE) |>     binning(bin = \"ntile\", nbins = 9) |>     vpcstats()   plot(vpc1)"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-VPC.html","id":"use-a-different-input-data-set","dir":"Articles","previous_headings":"Plotting using tidyvpc","what":"Use a different input data set","title":"VPC simulations","text":"first example used exact data used estimation. common way produce VPC, saw advantage user risk making mistakes preparing data set simulations. However, may interest include additional data even different data set simulation. including data points excluded estimation (like samples quantification limit) separate study included model. read data want provide NMsim’s data argument.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-VPC.html","id":"make-use-of-the-cluster","dir":"Articles","previous_headings":"Plotting using tidyvpc","what":"Make use of the cluster","title":"VPC simulations","text":"repeat , now 500 times (subproblems). make use arguments efficiency. sge means jobs sent cluster. nc argument now used meaning one core used per job. node cluster 16 cores, engage 500/16 ~ 32 nodes parallel, jobs executed time. supply path Nonmem executable. PSN work without specifying Nonmem path, PSN reason takes time submitting jobs cluster. nodes available, following simulation take couple minutes execute.","code":"file.res <- \"simulate-results/simpaths-vpc.rds\" set.seed(43) ## notice the data argument is not used. sim.vpc.sge <- NMsim(file.mod,                      table.vars=c(\"PRED\",\"IPRED\", \"Y\"),                      name.sim=\"vpc_01\"                     ,subproblems=500                     ,sge=TRUE                      ## ,path.nonmem=\"/opt/nonmem/nm751/run/nmfe75\"                      ##,path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\"                      ##,file.res=file.res                      )"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Simulation of New Subjects","text":"vignettes aims enabling Use NMsim simulate Nonmem models given input data set Distinguish perform common types simulations: new subjects, Simulate multiple new subjects derive prediction intervals Simulate one Nonmem model one NMsim() function call Important arguments Speed NMsim avoiding large table statements Add residual variability already performed model simulation using NMsim.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Simulation of New Subjects","text":"configured NMsim path Nonmem installation maybe also PSN. See NMsim-config.html. Don’t worry - easy.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"estimation-based-on-single-dose-simulation-of-multiple-doses","dir":"Articles","previous_headings":"","what":"Estimation based on single dose, simulation of multiple doses","title":"Simulation of New Subjects","text":"situation like : collected PK PD data single ascending dose trial drug candidate. PK model estimated using Nonmem. file model input output control streams (extensions .mod .lst respetively), parameter estimates (.ext). want predict concentrations multiple dose regimen. regimen studied clinical trials far, decided use population PK simulations purpose.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"the-simulation-data-set","dir":"Articles","previous_headings":"Estimation based on single dose, simulation of multiple doses","what":"The Simulation data set","title":"Simulation of New Subjects","text":"can create Nonmem-compatible simulation data set however want. keep separate topic read one already created NMsim-DataCreate.html using tools provided NMsim make task simpler faster :","code":"dat.sim <- read_fst(path=\"simulate-results/dat_sim.fst\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"simulation-of-a-new-subject","dir":"Articles","previous_headings":"","what":"Simulation of a new subject","title":"Simulation of New Subjects","text":"first time using NMsim, just want try simplest thing can think . Simulate new subject considerd multiple dose regimen estimated PK model single dose study. plot population individual predictions simulations (case) typical subject one simulated subject. variable called Y individual prediction plus residual variability. paper. code included show results NMsim ready plotted. main reason data transformed long format (melt) get ggplot2 generate legend automatically.  reason can plot simulation residual variability control stream includes variable Y defined residual variability $ERROR: residual variability case don’t line later paper.","code":"file.mod <- file.project(\"nonmem/xgxr021.mod\")  simres <- NMsim(file.mod=file.mod,                 data=dat.sim) datl <- as.data.table(simres) |>     melt(measure.vars=cc(PRED,IPRED,Y))  ggplot(datl,aes(TIME,value,colour=variable))+     geom_line(data=function(x)x[variable!=\"Y\"])+     geom_point(data=function(x)x[variable==\"Y\"])+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\") Y=F+F*ERR(1)+ERR(2)"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"what-happened","dir":"Articles","previous_headings":"","what":"What happened?","title":"Simulation of New Subjects","text":"NMsim uses automation tools NMdata Save data Nonmem-friendly format Create simulation control stream based referenced input control stream Update initial values based estimated values Modify input data-related sections reading input siulation data Modify output table file names paths generate simulation output tables Run Nonmem Read output tables combine input data one data object generated files stored folder called NMsim next estimation control stream. shortly section “basic additional arguments NMsim”. Let’s see first lines returned object: Notice things returned data: columns output tables defined input control stream . soon learn modify Input data columns (like trt). Additional columns (model nmout) may familiar NMdata users. soon learn “_noname” model column comes .","code":"simres[1:3] #>      ROW    ID  TIME  EVID   CMT   AMT    II  ADDL    DV   MDV   TVKA   TVV2 #>    <num> <int> <num> <num> <num> <num> <num> <num> <num> <num>  <num>  <num> #> 1:     1     1     0     1     1   300     0     0     0     1 2.1666 75.729 #> 2:     2     1     0     2     2    NA    NA    NA     0     1 2.1666 75.729 #> 3:     3     1     1     2     2    NA    NA    NA     0     1 2.1666 75.729 #>      TVV3   TVCL     KA     V2     V3     CL      Q  IPRED      Y   PRED   RES #>     <num>  <num>  <num>  <num>  <num>  <num>  <num>  <num>  <num>  <num> <num> #> 1: 150.06 13.978 2.1666 63.464 150.06 17.944 8.4865 0.0000 0.0000 0.0000     0 #> 2: 150.06 13.978 2.1666 63.464 150.06 17.944 8.4865 0.0000 0.0000 0.0000     0 #> 3: 150.06 13.978 2.1666 63.464 150.06 17.944 8.4865 3.1946 3.0486 2.8907     0 #>     WRES                   trt                model  nmout #>    <num>                <char>               <char> <lgcl> #> 1:     0 300 mg then 150 mg QD NMsim_xgxr021_noname   TRUE #> 2:     0 300 mg then 150 mg QD NMsim_xgxr021_noname   TRUE #> 3:     0 300 mg then 150 mg QD NMsim_xgxr021_noname   TRUE"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"how-to-re-read-the-simulation-results","dir":"Articles","previous_headings":"","what":"How to (re-)read the simulation results","title":"Simulation of New Subjects","text":"NMsim() creates .rds file information results stored. named based model name name.sim argument. NMsim provides path console every run. can also specify exactly stored file name using file.res argument. Run function NMreadSim file (re-)read simulation results. NMreadSim also supports wait argument making wait simulation results available case submitted large simulation cluster want continue execution ’s done.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"multiple-models","dir":"Articles","previous_headings":"","what":"Multiple models","title":"Simulation of New Subjects","text":"continue model, want compare simulation based model another model considering. NMsim can collect data one object: included file.res argument specify one single rds file NMsim create one two models simulated. can re-read results like : case multiple models provided, NMsim simply loops . collect results, can use model column separate two simulations. Since far just simulating subject model, makes litlle sense compare individual preditions. just plot population prediction (PRED):  simplicity, shall show rest examples just one model. run multiple models way shown .","code":"files.2.mod <- file.project(c(\"nonmem/xgxr021.mod\",\"nonmem/xgxr114.mod\")) simres.2models <- NMsim(file.mod=files.2.mod,                         data=dat.sim,                         file.res=\"simulate-results/simres_2models_paths.rds\"                         ) simres.2models <- NMreadSim(\"simulate-results/simres_2models_paths.rds\") ggplot(simres.2models,aes(TIME,PRED,colour=model))+geom_line()+     facet_wrap(c(\"trt\"),scales=\"free\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"a-few-basic-additional-arguments-to-nmsim","dir":"Articles","previous_headings":"","what":"A few basic additional arguments to NMsim","title":"Simulation of New Subjects","text":"first couple examples run bare minimum arguments - estimation control stream simulation data set. obviously encouraged read help NMsim learn many useful features , learn vignette. arguments learn point already. : dir.sims Path folder generated files stored. Use avoid NMsim write directories estimation models . may belong . may want separate model development step post-processing step. encouraged explore NMsim leaves directory (find fully reproducible simulation Nonmem runs including simulation input data). dir.res dir.sims contains Nonmem files, can specify separate directory just compressed results. rds files containing information simulations performed also saved . means soon results read , contents dir.sims can purged without loss critical data. can save lot disk space. name.sim Give simulation meaningfull name. , NMsim called “noname”. table.vars important. redefines output table section estimation control stream simulation control stream. estimation control stream may many variables printed (make Nonmem slow), may useful simulation analysis. See used . get used argument, use frequently. wait Wait simulation done return resulting data? path rds file read NMreadSim returned. reuse.results TRUE results found file, read instead rerunning simulation. seed numeric value used Nonmem’s $SIMULATION section learn arguments next examples.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"more-subjects-and-prediction-intervals","dir":"Articles","previous_headings":"","what":"More subjects and prediction intervals","title":"Simulation of New Subjects","text":"create prediction interval based selected model, need simulate multiple new subjects. two ways easily obtain . One repeat (rbind) simulation input dataset, one repetetion per new subject, update ID column get distinct subjects.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"multiple-subjects-created-in-simulation-input-data","dir":"Articles","previous_headings":"More subjects and prediction intervals","what":"Multiple subjects created in simulation input data","title":"Simulation of New Subjects","text":"follwing shows one generate 1000 subjects using data.table. (use data.table lot, can provide good way without, happy include ). now simulate 1000 subjects plugging data object:","code":"dat.sim.1000 <- NMdata::egdt(                             as.data.table(dat.sim)[,!(\"ID\")]                            ,                             data.table(ID=1:1000)                         ) dat.sim.1000[,ID:=.GRP,by=.(ID,trt)] ## order with respect to new IDs setorder(dat.sim.1000,trt,ID,TIME,EVID) ## check dataset NMcheckData(dat.sim.1000,type.data=\"sim\") simres.n1000.1 <- NMsim(file.mod=file.mod,                         data=dat.sim.1000,                         dir.sims=\"~/NMsim_vignette\", ## where to store simulation files                         name.sim=\"N1000_datarep\"                         )"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"multiple-subjects-generated-by-nonmem","dir":"Articles","previous_headings":"More subjects and prediction intervals","what":"Multiple subjects generated by Nonmem","title":"Simulation of New Subjects","text":"way simulate multiple subjects making use Nonmem’s SUBPROBLEMS simulation feature makes Nonmem rerun simulation specified number times. Notice , use dat.sim data without 1000 replications. make use NMREP column generated NMdata::NMscanData redefine ID column: two approaches computationally equally fast, significant difference probably Nonmem reading smaller larger simulation input data file. Unless input dataset becomes large, merely question preference modeler one use. case simulated patients need different dosing sample schedules, manual construction data needed - ’s straightforward replication.","code":"simres.n1000.2 <- NMsim(file.mod=file.mod,                         data=dat.sim,                         subproblems=1000,                         dir.sims=\"~/NMsim_vignette\", ## where to save and run Nonmem simulations                         dir.res=\"simulate-results\", ## where to save simulation results                         name.sim=\"N1000_subproblems\",                         ) simres.n1000.2 <- as.data.table(simres.n1000.2)[,ID:=.GRP,by=.(NMREP,ID,trt)]"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"the-prediction-interval","dir":"Articles","previous_headings":"More subjects and prediction intervals","what":"The prediction interval","title":"Simulation of New Subjects","text":"now plot prediction interval - case based results simulation using SUBPROBLEMS; makes difference derive prediction interval.","code":"simres.pi <- as.data.table(simres.n1000.2)[,setNames(as.list(quantile(IPRED,probs=c(.05,.5,.95))),cc(ll,median,ul)),                                            by=.(trt,TIME)] simres.pi$type <- \"pi\" simres.pi$pi.cover <- \"90%\"  p.pi.typ <- ggplot(simres.pi,aes(TIME,fill=trt))+     geom_ribbon(aes(ymin=ll,ymax=ul,alpha=pi.cover))+     geom_line(aes(y=median,colour=trt))+     scale_alpha_manual(values=c(\"90%\"=.5))+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\")  p.pi.typ"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-basics.html","id":"read-previously-generated-simulations","dir":"Articles","previous_headings":"","what":"Read previously generated simulations","title":"Simulation of New Subjects","text":"need save simulation results already saved NMsim. Instead, use arguments dir.sims, dir.res name.sim make sure get meaningful structure generated files. read results NMreadSim(). fact, also NMsim Nonmem run.","code":"simres.n1000.1 <- NMreadSim(\"simulate-results/NMsim_xgxr021_N1000_datarep_paths.rds\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Requirements and Configuration","text":"vignettes aims enabling Understand requirements using NMsim Configure NMsim use PSN methods provided NMsim update Nonmem control stream initial values run Nonmem Understand pros cons using PSN vs. methods provided NMsim. Configure NMsim store results desired locations separate storage temporary files storage selected efficiently stored key result data.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"requirements","dir":"Articles","previous_headings":"","what":"Requirements","title":"Requirements and Configuration","text":"NMsim many features work newer R installation. Integration Nonmem seamless simulation experience within R, Nonmem installations linux, Windows Mac supported. Multi-threaded execution may currently work Windows. NMsim relies Nonmem running simulations. important requirement fully seamless simulation experience within R, NMsim must able execute Nonmem. simplest example easily achieved, R Nonmem run system. separate system, questions : R Nonmem share access data structure relevant files can stored executed? can R login system run Nonmem, instance SSH? case two criteria met, fully seamless experience still possible. system meet requirements document, mean NMsim can’t work. can still put together Nonmem simulation control streams data make everything ready Nonmem execute. run Nonmem, can use NMsim::NMreadSim() collect results.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"configuration-of-nmsim","dir":"Articles","previous_headings":"","what":"Configuration of NMsim","title":"Requirements and Configuration","text":"section, background discussion provided understand methods choose. matter prefer use, best set NMsim able use Nonmem (available) PSN. flexibility switch methods preferred.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"specify-the-nonmem-paths","dir":"Articles","previous_headings":"Configuration of NMsim","what":"Specify the Nonmem paths","title":"Requirements and Configuration","text":"NMsim run Nonmem, needs know find Nonmem executable. step recommended. easiest way configure NMdata’s configuration function. Say want run Nonmem /opt/NONMEM/nm75/run/nmfe, insert loading NMdata beginning script Windows, executable .bat extension. path look normally use PSN Nonmem interface, therefore know Nonmem installed, can check using PSN. following command give Nonmem installation paths PSN configured . However, likely still need add last piece path installation directory nonmem binary.","code":"NMdataConf(path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\") NMdataConf(path.nonmem =\"C:/nm75g64/run/nmfe75.bat\") psn -nm_versions"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"specify-the-psn-installation-path","dir":"Articles","previous_headings":"Configuration of NMsim","what":"Specify the PSN installation path","title":"Requirements and Configuration","text":"PSN available, can run execute update_inits terminal, don’t need configure NMsim finds PSN. PSN installed, provide paths two executables running (something like /opt/PSN/execute run1.mod), tell NMsim find . case, easiest loading NMdata running: Notice dir.psn refers directory path.nonmem refers file.","code":"NMdataConf(dir.psn=\"/opt/PSN\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"configure-the-directories-nmsim-writes-to","dir":"Articles","previous_headings":"Configuration of NMsim","what":"Configure the directories NMsim writes to","title":"Requirements and Configuration","text":"NMsim creates two main directories output.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"dir-sims","dir":"Articles","previous_headings":"Configuration of NMsim > Configure the directories NMsim writes to","what":"dir.sims","title":"Requirements and Configuration","text":"simulation control streams data created NMsim output written Nonmem far, largest directory files necessarily needed storage.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"dir-res","dir":"Articles","previous_headings":"Configuration of NMsim > Configure the directories NMsim writes to","what":"dir.res","title":"Requirements and Configuration","text":"Selected efficiently stored simulation output data. _paths.rds contains index table `NMreadSim()1. contain simulated data insignificant size. .fst full simulation output data set. NMreadSim() automatically create file first time reads _paths.rds. user need know fst format keep reading simulation results via NMreadSim() _paths.rds. must make sure preserve directory case need re-analyze analyze simulation output without re-running simulations.","code":""},{"path":[]},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"psn-or-not-for-nonmem-execution","dir":"Articles","previous_headings":"PSN or not?","what":"PSN or not for Nonmem execution","title":"Requirements and Configuration","text":"NMsim can call Nonmem using PSN’s execute similar functionality included NMsim. refer methods way referred NMsim() function argument controls one used, .e. method.execute=\"psn\" method.execute=\"nmsim\". PSN users familiar PSN’s execute , method.execute=\"nmsim\" needs words explanation. essentially R-based method similar PSN’s execute, meaning creates temporary folder containing necessary files running Nonmem, runs nmfe (specified using path.nonmem) copies desired result files back location input control stream. NMsim can control behavior function better can PSN’s execute enables NMsim additional things method.execute=\"nmsim\". simulations, method.execute=\"psn\" provide advantages method.execute=\"nmsim\". contrast, simulation types work method.execute=\"nmsim\". need tell NMsim find Nonmem (setting path.nonmem) work. Nonmem execution NMexec() (typically, estimation simulation) slightly different discussion. See ?NMexec .","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"psn-or-not-for-updating-initial-values","dir":"Articles","previous_headings":"PSN or not?","what":"PSN or not for updating initial values","title":"Requirements and Configuration","text":"NMsim needs update initial values using model estimate prior running simulation. PSN provides update_inits function , available, default method NMsim. , refer argument name, method.update.inits=\"psn\". NMsim also provides similar functionality internally, referred method.update.inits=\"NMsim\". used PSN found - ask . method.update.inits=\"psn\" two advantages NMsim-provided method. widely used, keeps comments affected control stream sections ($THETA, $OMEGA, $SIGMA). method.update.inits=\"nmsim\" drop comments affected sections. past seen issues methods update $OMEGA sections -diagonal elements (BLOCK). method.update.inits=\"nmsim\" takes simple approach. Reading OMEGA matrix .ext file, relying interpreting Nonmem code . support systems without PSN main reason one choose method.update.inits=\"nmsim\" method.update.inits=\"psn\". order make use method.update.inits=\"psn\", need make sure NMsim can find PSN.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-config.html","id":"input-model-file-name-extensions","dir":"Articles","previous_headings":"PSN or not?","what":"Input model file name extensions","title":"Requirements and Configuration","text":"following requirements file name contents concerns “input model”. concern files generated NMsim. requirement file name extension input control stream. NMsim function documentation argument file.mod refer input control streams .mod. However, input control stream can extension (e.g., .ctl .txt). input control streams named differently .mod, avoid setting file.mod using NMdata::NMdataConf(file.mod). estimate files (.ext, .phi known subjects simulated, .cov simulating parameters covariance step) default expected carry file name file name extension. See arguments like file.ext file.phi specify paths. Currently, default behavior customized two arguments provided NMsim() call extend relevant simulation. Output table files input model may needed. case using NMsim_known models estimated using Bayesian $ESTIMATION methods like SAEM /$IMP. case NMsim need find ETA values subjects, even spread across output tables. estimation methods leave PHI instead ETA .phi file. emperical Bayes estimates, NMsim needs ETAs. limitations file names output tables. needed, file names automatically identified read using NMdata::NMscanData. $TABLE options, subsetting supported using FIRSTONLY LASTONLY.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-known.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"vignettes aims enabling use NMsim following purposes Simualation known subjects (estimated random effects),","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-known.html","id":"prerequisites","dir":"Articles","previous_headings":"","what":"Prerequisites","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"configured NMsim path Nonmem installation maybe also PSN (optional). See NMsim-config.html. Don’t worry - easy. familiar basic NMsim arguments described NMsim-basics.html. vignette learned use default simulation method. vignette using model simulation input data demonstrate use additional methods features NMsim.","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-known.html","id":"simulation-of-known-subjects","dir":"Articles","previous_headings":"","what":"Simulation of known subjects","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"sometimes want simulate already observed subjects. means want reuse estimated random effects (ETA’s) given subject ID’s. NMsim method called NMsim_known. restriction subjects (values ID) simulation input data must used estimation input data. Let’s think one time go . NMsim_known work, ID values simulation data set must identical ID values used estimation. NMsim_known find EBE’s (ETAs) define subject. models estimated FOCEI, NMsim_known take ETAs .phi file produced Nonmem. SAEM/IMP-based estimation file used, user must stored ETAs output table files method work. matter table files , just need . can write like done example model provided NMsim called xgxr032.mod. “subject” essentially means set ETAs. Covariates must still provided input data set can modified wanted. Notice, NMsim_known nothing restore covariates - must define covariates input data needed.","code":"$TABLE ETAS(1:LAST) NOAPPEND NOPRINT FILE=xgxr032_etas.txt"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-known.html","id":"individual-dosing-history-sample-times-or-both","dir":"Articles","previous_headings":"","what":"Individual dosing history, sample times or both","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"Individual simulations useful several purposes. Examples Reuse individual dosing history use new common sample scheme. homogeneous evaluation exposure metrics Cmax, AUC, just show concentration-time profiles identical sampling times based model estimated data heterogeneos sampling. Currently, example vignette see examples, pretty clear . Reuse dosing history use individual sampling scheme different data set, e.g. PD. Simulate new common dosing sampling scheme simulate already observed subjects new regimen. sometimes done one reason model considered reliable simulation new subjects individual parameter estimates trusted. Reuse simulated population. One may prefer reuse simulated subjects multiple simulations reproducibility difference say simulation results different regimens driven differences regimen, populations. use NMsim_known todo list tog get ’s vignette .","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-known.html","id":"simulate-known-subjects-on-a-new-dosing-regimen-and-new-sample-schedule","dir":"Articles","previous_headings":"","what":"Simulate known subjects on a new dosing regimen and new sample schedule","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"following code takes already created simulation data set single ID, merges columns ID onto observed IDs. gives simulation data subjects. First thing, decide model (input control stream estimated model) use example: Simulation known ETA values possible NMsim’s internal Nonmem execution method. means, need provide path Nonmem executable. Also, configure locations NMsim store run Nonmem control streams (dir.sims) save final results file. Finally, vignette uses data.table code tell NMsim return data.tables. simulation results plotted subject.","code":"file.mod <- system.file(\"examples/nonmem/xgxr021.mod\",package=\"NMsim\") NMdataConf(path.nonmem=\"/opt/NONMEM/nm75/run/nmfe75\",            dir.sims=\"simulate-tmp\",            dir.res=\"simulate-results\",            as.fun=\"data.table\") ## read model results just to extract the observed ID's res.mod <- NMscanData(file.mod,quiet=TRUE) ids <- data.frame(ID=unique(res.mod$ID))  ## Repeat the simulation data set for each ID and order accordingly dat.sim.known <- merge(ids,                        dat.sim[,setdiff(colnames(dat.sim),c(\"ID\")),with=FALSE]                        ) setorder(dat.sim.known,ID,TIME,EVID) ## check data NMcheckData(dat.sim.known,type.data=\"sim\")  simres.known <- NMsim(file.mod=file.mod,                       data=dat.sim.known,                       method.sim=NMsim_known,                       table.vars=\"PRED IPRED CL V2 KA\",                       name.sim=\"known1\"                       ) ggplot(as.data.table(simres.known)[EVID==2],aes(TIME,IPRED,colour=factor(ID)))+     geom_line()+     theme(legend.position=\"none\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-known.html","id":"simulate-individual-dosing-history-at-new-individual-sampling-times-for-a-pkpd-dataset","dir":"Articles","previous_headings":"Simulate known subjects on a new dosing regimen and new sample schedule","what":"Simulate individual dosing history at new individual sampling times for a PK/PD dataset","title":"Simulate Known Subjects Using Emperical Bayes Estimates (Etas/Phis)","text":"want plot PD data angainst PK. However, PD sampled differnetly PK, want evaluate individual predictions PK model individual PD samplng times - reusing individual dosing history. Reading example PD data: PK model without time-varying covariates, suggested steps generate data simulation : Take dose records PK model estimation input data (pkdos). Just keep necessary columns like ID, TIME, EVID, CMT, AMT, ADDL, II, necessary covariates Take PD data observation records (pdsamples). Just keep ID, TIME, set EVID=2. Add unique row identifier pdsamples (integer row counter, like ROW=1:nrow(pdsamples)) Stack (rbind data.tables bind_rows tidyverse) pkdos pdsamples one data set (pdsim) pdsim, set DV=NA Sort pdsim least ID, TIME EVID. depending trial design case time-varying covariates, can keep data records PK data (without DV), change observation records simulation records (EVID=2 instead EVID=0). run NMsim like . renaming prediction columns using Nonmem $TABLE statement confuse PK predictions PD predictions.","code":"pd <- readRDS(system.file(\"examples/data/xgxr_pd.rds\",package=\"NMsim\")) ## some code below makes use of data.table features so we make it a data.table setDT(pd) ## Take dose records from PK model estimation input data pkres <- NMscanData(file.mod,quiet=TRUE) pkdos <- pkres[EVID==1,.(ID, TIME, EVID, CMT, AMT)] ## Take PD data observation records (`pdsamples`) pdsamples <- pd[EVID==0,.(ID,TIME,LIDV)] ## Stack `pkdos` and `pdsamples` to one data set (`pdsim`) pdsim <- rbind(pkdos,pdsamples,fill=TRUE) ## Nonmem needs a DV column to run pdsim[,DV:=NA] ## only include subjects that were included in the PK model pdsim <- pdsim[ID%in%pkres$ID] setorder(pdsim,ID,TIME,EVID) simres.pksim <- NMsim(file.mod,                       data=pdsim,                       name.sim=\"pkpd\",                       method.sim=NMsim_known,                       table.vars=\"PKIPRED=IPRED PKPRED=PRED\"                       ) ggplot(simres.pksim[!is.na(LIDV)&!is.na(PKIPRED)],aes(PKIPRED,LIDV))+     geom_point()+     labs(x=\"Individual PK prediction\",y=\"Observed PD value\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-speed.html","id":"most-common-reasons-for-nmsim-to-fail-or-be-slow","dir":"Articles","previous_headings":"","what":"Most common reasons for NMsim to fail or be slow","title":"NMsim and speed","text":"NMsim can find Nonmem executable /PSN, work basically models makes sense replace $ESTIMATION $SIMULATION. NMsim fails behaves unexpectedly, make sure read output Nonmem R console. NMsim complains find output tables, likely Nonmem failed generate . one thing Nonmem model evaluation remember. Nonmem run model uses variables unavailable. may covariate model include data set. often estimation models include variables output tables used anything else Nonmem read input data set printed output tables. fact, exactly included row identifier calle ROW generating simulation data set. , get error: Nonmem gets writing $TABLE find variable called ROW. , fixed including ROW. many cases, best way fix reduce $TABLE section using table.vars argument. need simulation results population individual predictions anyway. omitted ROW input data set done something simple table.vars can help avoid many problems. NMsim slow, potentially large low-hanging fruit. benchmark example, reduced (large) simulation run time ~1.5 hours ~7 minutes way.","code":"Starting NMTRAN    AN ERROR WAS FOUND IN THE CONTROL STATEMENTS.   AN ERROR WAS FOUND ON LINE 60 AT THE APPROXIMATE POSITION NOTED:  $TABLE ROW TVKA TVV2 TVV3 TVCL KA V2 V3 CL Q PRED IPRED Y NOPRINT FILE=NMsim_xgxr021_noname.tab          X    THE CHARACTERS IN ERROR ARE: ROW   479  THIS ITEM IS NOT LISTED IN MODULE NMPRD4 AND MAY NOT BE DISPLAYED. cp: cannot stat 'NMsim_xgxr021_noname.tab': No such file or directory Error in NMscanTables(file, quiet = TRUE, as.fun = \"data.table\", col.row = col.row,  :    NMscanTables: File not found: /home/philip/R/x86_64-pc-linux-gnu-library/4.2/NMsim/examples/nonmem/NMsim/xgxr021_noname/NMsim_xgxr021_noname.tab. Did you copy the lst file but forgot table file? Results could not be read. simres <- NMsim(file.mod=file.mod,                 data=dat.sim,                 table.vars=\"PRED IPRED Y\")"},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-varyPars.html","id":"objectives","dir":"Articles","previous_headings":"","what":"Objectives","title":"Simulate with modified parameter values","text":"vignettes aims enabling use NMsim following purposes Simulation parameters modified estimated values","code":""},{"path":"https://philipdelff.github.io/NMsim/articles/NMsim-varyPars.html","id":"vary-parameter-values","dir":"Articles","previous_headings":"","what":"Vary parameter values","title":"Simulate with modified parameter values","text":"Sometimes want simulate modification estimated model. NMsim can make user-specified modifications model simulating list.sections argument. SAD study run fast solution formulation. want see slower absorption rate affect PK prediction multiple dose regimen. model estimate, TVKA=2.17. now try four times slower absorption:  used list.sections modify $PK section. used append two lines. use modify section model, essentially modification. However, appending $PK $PRED simple often robust flexible enough. spcific analysis one specific KA value. often convenient control numeric changes model using simulation input data set rather hard-coding numerical values list.sections. following tries number fold changes KA.","code":"simres <- NMsim(file.mod=file.mod                ,data=dat.sim                ,dir.sims=\"~/NMsim_vignette\" ## where to store simulation files                ,seed=12345                 )  simres.slowabs <- NMsim(file.mod=file.mod,                         data=dat.sim                        ,dir.sims=\"~/NMsim_vignette\" ## where to store simulation files                        ,name.sim=\"slower_abs\"                        ,seed=12345                        ,list.sections=list(PK=function(x)c(x,\"TVKA=TVKA/4\",\"KA=KA/4\"))                         ) rbind(simres,simres.slowabs) |>     ggplot(aes(TIME,PRED,colour=model))+     geom_line() NMdataConf(as.fun=\"data.table\") dat.sim.varka <- egdt(dat.sim,data.table(KASCALE=c(1,4,10))) dat.sim.varka[,ID:=.GRP,by=.(KASCALE,ID)] setorder(dat.sim.varka,ID,TIME,EVID)  simres.varka <- NMsim(file.mod=file.mod,                       data=dat.sim.varka                      ,dir.sims=\"~/NMsim_vignette\" ## where to store simulation files                      ,name.sim=\"varka\"                      ,seed=12345                      ,list.sections=list(PK=function(x)c(x,\"TVKA=TVKA/KASCALE\",\"KA=KA/KASCALE\"))                       ) ggplot(simres.varka[simres.varka$EVID==2,],aes(TIME,PRED,colour=factor(KASCALE)))+ geom_line()+ labs(colour=\"Fold absorption prolongation\")"},{"path":"https://philipdelff.github.io/NMsim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philip Delff. Author, maintainer. Matthew Fidler. Contributor.            Co-author NMreadCov","code":""},{"path":"https://philipdelff.github.io/NMsim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Delff P (2024). NMsim: Seamless 'Nonmem' Simulation Platform. R package version 0.1.0.960, https://philipdelff.github.io/NMsim/.","code":"@Manual{,   title = {NMsim: Seamless 'Nonmem' Simulation Platform},   author = {Philip Delff},   year = {2024},   note = {R package version 0.1.0.960},   url = {https://philipdelff.github.io/NMsim/}, }"},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"nmsim","dir":"","previous_headings":"","what":"Seamless Nonmem Simulation Platform","title":"Seamless Nonmem Simulation Platform","text":"Please make sure read NMsim website can browse several vignettes examples speecific topics. NMsim R package can simulate Nonmem models (using NMsim function) based just simulation data set path estimation control stream. also retrive combine output tables input data Nonmem finished return results R. interface “seamless” fully integrated R. Run simulation (estimated) model stored “path//file.mod” using simulation input data set stored variable data.sim way: quickly learn models, can’t wait see working, can following: dir.sims may needed model case may read-location. Notice, working Nonmem model long provided simulation data set sufficient run . ready plot:  example simulation multiple dose regimen loading dose using model estimated single dose data. first vignette NMsim-basics.html.","code":"simres <- NMsim(file.mod=\"/path/to/file.mod\",                 data=data.sim) data.sim <- read.csv(system.file(\"examples/derived/dat_sim1.csv\",package=\"NMsim\")) simres <- NMsim(file.mod=system.file(\"examples/nonmem/xgxr021.mod\",package=\"NMsim\"),                 data=data.sim,                 dir.sims=\".\") library(ggplot2) datl <- as.data.table(simres) |>     melt(measure.vars=cc(PRED,IPRED,Y))  ggplot(datl,aes(TIME,value,colour=variable))+     geom_line(data=function(x)x[variable!=\"Y\"])+     geom_point(data=function(x)x[variable==\"Y\"])+     labs(x=\"Hours since first dose\",y=\"Concentration (ng/mL)\")"},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"supported-types-of-simulations","dir":"","previous_headings":"","what":"Supported types of simulations","title":"Seamless Nonmem Simulation Platform","text":"NMsim flexible way define simulation methods. following methods currently provided: Simulation new subjects (default explicitly method.sim=NMsim_default) Simulation typical subject (ETAs equal 0, method.sim=NMsim_typical) Simulation subjects already estimated Nonmem model (method.sim=NMsim_known) Simulation parameter uncertainty based Nonmem covariance step (method.sim=NMsim_VarCov) Simulation “” case already prepared simulation control stream just want automate use combination simulation data sets (method.sim=NMsim_asis) learn run simulations Nonmem models, get started NMsim-basics.html. really easy. addition, NMsim can simulate multiple models time. E.g., bootstrap run model available, NMsim can run simulation bootstrap models collect results one dataset. provides robust easy way simulate Nonmem model uncertainty. can also write methods, Nonmem-based simulation (job) want automate using NMsim. Many features available. Prominent ones : Can use submit jobs clusters. can wait simulations done automatically collect results like example . Simulation replicates using Nonmem SUBPROBLEMS feature avaible subproblems argument Can modify simulation control stream fly - powerful feature studying effect varying model parameters Simulations models transformed observations can automatically transformed back using transform argument. residual variability implemented simulated model, NMsim provides way (addResVar()) add residual variability R simulation run.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"how-nmsim-works","dir":"","previous_headings":"","what":"How NMsim works","title":"Seamless Nonmem Simulation Platform","text":"One strength NMsim simulate, translate otherwise interpret Nonmem model. Instead, automates Nonmem simulation workflow (including execution Nonmem) wraps one R function. example given , NMsim following: Save simulation input data csv file Nonmem Create simulation input control stream based file.mod ($INPUT $DATA matching saved simulation data set; $SIMULATE instead $ESTIMATION $COVARIANCE) Update fix initial values based estimate (file.ext) Run Nonmem generated simulation control stream Collect output data tables, combine , merge simulation input data Return collected data R eliminates need re-implementation model simulation purposes. hand, also means NMsim can’t work without Nonmem. NMsim can call Nonmem directly via PSN. NMsim run system Nonmem executed, NMsim can still prepare simulation control stream datafile. NMsim relatively small R package. makes extensive use functionality handle Nonmem data control streams provided R package NMdata.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"supported-model-types","dir":"","previous_headings":"","what":"Supported model types","title":"Seamless Nonmem Simulation Platform","text":"methods currently provided NMsim work (many ) Pop PK models continuous-scale PD models. Methods currently provided time--event models. Also, depending coding models, censored data models may work box, model may single variable (Nonmem) simulates wanted information data rows, interpretation may depend values. input data set must contain whatever variables needed Nonmem model. common issue Nonmem model uses covariate simulation input data set. NMdata’s NMcheckData good help identifying input data issues running Nonmem - Nonmem acts unexpectedly.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"nmsim-and-speed","dir":"","previous_headings":"","what":"NMsim and speed","title":"Seamless Nonmem Simulation Platform","text":"Nonmem may fastest simulator . actually often, reason Nonmem slow providing simulation result takes long time writing $TABLE files (yes, can account 90% time Nonmem spends). NMsim provides simple way get around . argument text.table can used define columns needed simulation output (may little PRED, IPRED, couple - remember input data merged back automatically). result, NMsim may still slower re-implementation different framework. ’s extremely easy .","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"requirements","dir":"","previous_headings":"","what":"Requirements","title":"Seamless Nonmem Simulation Platform","text":"NMsim dependent running Nonmem. Often, mean Nonmem must available system one running R. However, Nonmem run separate system qsub another way initiates Nonmem another system, work . however, R can read file system Nonmem writes results, can retrieve results. NMsim need PSN can use . However, features available PSN, features specify path Nonmem executable (say path.nonmem=/path//nmfe75 Nonmem executable want use). Specifically simulation types currently available, simulation known subjects possible using PSN (works Nonmem executable provided). PSN used, NMsim uses PSN’s execute run models. addition, NMsim default uses PSN’s update_inits update initial values control streams, PSN available. NMsim also include simple function PSN available.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"is-nmsim-reliable","dir":"","previous_headings":"","what":"Is NMsim reliable?","title":"Seamless Nonmem Simulation Platform","text":"Importantly, NMsim (least default) modify, translate simulate model . modify control stream sections $INPUT, $DATA, $ESTIMATION, $SIMULATION, $THETA, $OMEGA, $SIGMA, $TABLE needed. fact NMsim allows skipping re-implementation just uses Nonmem simulate Nonmem model , eliminates risk discrepancies estimated model simulated model. produced control stream saved together simulation data set open manual inspection can obviously run Nonmem independently NMsim.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"easily-create-simulation-datasets","dir":"","previous_headings":"","what":"Easily create simulation datasets","title":"Seamless Nonmem Simulation Platform","text":"NMsim includes functions (NMcreateDoses addEVID2) easily create simulation data sets. one certainly need use functions use NMsim, add package providing framework enables complete simulation workflow 5-15 simple lines R code.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"run-nonmem-from-r","dir":"","previous_headings":"","what":"Run Nonmem from R","title":"Seamless Nonmem Simulation Platform","text":"several packages can , NMsim may best choice feature looking . However, running Nonmem using NMexec() function provided NMsim one important advantage saves input data together Nonmem control streams. ensures output data can merged input data went model, even input data file modified lost. Saves input data Nonmem model Provides simple R command submission Nonmem jobs Optionally handles cluster configuration Saves xml file default NMexec submit model runs cluster default. can switched running Nonmem locally. Please notice jobs submitted cluster specific way using PSN. setup different, now supported. Please use NMexec(sge=FALSE) case (may desirable). Notice simulations done cluster default may still able use NMsim.","code":""},{"path":"https://philipdelff.github.io/NMsim/index.html","id":"install","dir":"","previous_headings":"","what":"Install","title":"Seamless Nonmem Simulation Platform","text":"NMsim CRAN, MPN github:","code":"## From CRAN/MPN repositories install.packages(\"NMsim\") ## From github library(remotes) install_github(\"philipdelff/NMsim\")"},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateDoses.html","id":null,"dir":"Reference","previous_headings":"","what":"Easily generate dosing records — NMcreateDoses","title":"Easily generate dosing records — NMcreateDoses","text":"Combinations different columns can generated. Columns extended repeating last value column needed order match length columns.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateDoses.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Easily generate dosing records — NMcreateDoses","text":"","code":"NMcreateDoses(   TIME,   AMT = NULL,   RATE = NULL,   SS = NULL,   CMT = 1,   EVID = 1,   addl = NULL,   as.fun )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateDoses.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Easily generate dosing records — NMcreateDoses","text":"TIME time dosing events AMT vector dataa.frame amounts amount RATE Optional infusion rate SS Optional steady-state flag CMT Compartment number. Default dose CMT=1. EVID event ID use doses. Default use EVID=1, EVID might also wanted. addl Optinal. list ADDL II applied last dose .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateDoses.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Easily generate dosing records — NMcreateDoses","text":"data.frame dosing events","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateDoses.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Easily generate dosing records — NMcreateDoses","text":"Experimental. Please check output use. AMT, RATE,     SS, II, CMT vectors length 1 longer.     max length 1 repeated.  TIME longer ,     extended match length TIME. Allowed combinations     AMT, RATE, SS, II :     https://ascpt.onlinelibrary.wiley.com/doi/10.1002/psp4.12404","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateDoses.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Easily generate dosing records — NMcreateDoses","text":"","code":"library(data.table) ## Users should not use setDTthreads. This is for CRAN to only use 1 core. data.table::setDTthreads(1)  ## arguments are expanded - makes loading easy NMcreateDoses(TIME=c(0,12,24,36),AMT=c(2,1)) #>   ID TIME EVID CMT AMT MDV #> 1  1    0    1   1   2   1 #> 2  1   12    1   1   1   1 #> 3  1   24    1   1   1   1 #> 4  1   36    1   1   1   1 ## Different doses by covariate NMcreateDoses(TIME=c(0,12,24),AMT=data.table(AMT=c(2,1,4,2),DOSE=c(1,2))) #>   ID TIME EVID CMT AMT MDV DOSE #> 1  1    0    1   1   2   1    1 #> 2  1   12    1   1   4   1    1 #> 3  1   24    1   1   4   1    1 #> 4  2    0    1   1   1   1    2 #> 5  2   12    1   1   2   1    2 #> 6  2   24    1   1   2   1    2 ## Make Nonmem repeat the last dose. This is a total of 20 dosing events. NMcreateDoses(TIME=c(0,12),AMT=c(2,1),addl=list(ADDL=c(NA,9*2),II=c(NA,12))) #>   ID TIME EVID CMT AMT II ADDL MDV #> 1  1    0    1   1   2 NA   NA   1 #> 2  1   12    1   1   1 12   18   1 dt.amt <- data.table(DOSE=c(100,400)) dt.amt[,AMT:=DOSE*1000] #>     DOSE   AMT #>    <num> <num> #> 1:   100 1e+05 #> 2:   400 4e+05 dt.amt #>     DOSE   AMT #>    <num> <num> #> 1:   100 1e+05 #> 2:   400 4e+05 doses.sd <- NMcreateDoses(TIME=0,AMT=dt.amt) doses.sd$dose <- paste(doses.sd$DOSE,\"mg\") doses.sd$regimen <- \"SD\" doses.sd #>   ID TIME EVID CMT   AMT MDV DOSE   dose regimen #> 1  1    0    1   1 1e+05   1  100 100 mg      SD #> 2  2    0    1   1 4e+05   1  400 400 mg      SD  ### multiple dose regimens with loading are easily created with NMcreateDoses too ## Specifying the time points explicitly dt.amt <- data.table(AMT=c(200,100,800,400)*1000,DOSE=c(100,100,400,400)) doses.md.1 <- NMcreateDoses(TIME=seq(0,by=24,length.out=7),AMT=dt.amt) doses.md.1$dose <- paste(doses.md.1$DOSE,\"mg\") doses.md.1$regimen <- \"QD\" doses.md.1 #>    ID TIME EVID CMT   AMT MDV DOSE   dose regimen #> 1   1    0    1   1 2e+05   1  100 100 mg      QD #> 2   1   24    1   1 1e+05   1  100 100 mg      QD #> 3   1   48    1   1 1e+05   1  100 100 mg      QD #> 4   1   72    1   1 1e+05   1  100 100 mg      QD #> 5   1   96    1   1 1e+05   1  100 100 mg      QD #> 6   1  120    1   1 1e+05   1  100 100 mg      QD #> 7   1  144    1   1 1e+05   1  100 100 mg      QD #> 8   2    0    1   1 8e+05   1  400 400 mg      QD #> 9   2   24    1   1 4e+05   1  400 400 mg      QD #> 10  2   48    1   1 4e+05   1  400 400 mg      QD #> 11  2   72    1   1 4e+05   1  400 400 mg      QD #> 12  2   96    1   1 4e+05   1  400 400 mg      QD #> 13  2  120    1   1 4e+05   1  400 400 mg      QD #> 14  2  144    1   1 4e+05   1  400 400 mg      QD ## or using ADDL+II dt.amt <- data.table(AMT=c(200,100,800,400)*1000,DOSE=c(100,100,400,400)) doses.md.2 <- NMcreateDoses(TIME=c(0,24),AMT=dt.amt,addl=data.table(ADDL=c(0,5),II=c(0,24))) doses.md.2$dose <- paste(doses.md.2$DOSE,\"mg\") doses.md.2$regimen <- \"QD\" doses.md.2 #>   ID TIME EVID CMT   AMT II ADDL MDV DOSE   dose regimen #> 1  1    0    1   1 2e+05  0    0   1  100 100 mg      QD #> 2  1   24    1   1 1e+05 24    5   1  100 100 mg      QD #> 3  2    0    1   1 8e+05  0    0   1  400 400 mg      QD #> 4  2   24    1   1 4e+05 24    5   1  400 400 mg      QD"},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateMatLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Create text lines for OMEGA and SIGMA Nonmem sections — NMcreateMatLines","title":"Create text lines for OMEGA and SIGMA Nonmem sections — NMcreateMatLines","text":"Create text lines OMEGA SIGMA Nonmem sections","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateMatLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create text lines for OMEGA and SIGMA Nonmem sections — NMcreateMatLines","text":"","code":"NMcreateMatLines(omegas, type)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateMatLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create text lines for OMEGA and SIGMA Nonmem sections — NMcreateMatLines","text":"omegas See NMdata::NMreadExt pars element returned function. type matrix type. OMEGA SIGMA - case -sensitive.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMcreateMatLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create text lines for OMEGA and SIGMA Nonmem sections — NMcreateMatLines","text":"Character vector","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute Nonmem and archive input data with model files — NMexec","title":"Execute Nonmem and archive input data with model files — NMexec","text":"Execute Nonmem within R - optionally default parallel. Archiving input data ensures postprocessing can still reproduced input data files updated.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute Nonmem and archive input data with model files — NMexec","text":"","code":"NMexec(   files,   file.pattern,   dir,   sge = TRUE,   input.archive,   nc = 64,   dir.data = NULL,   wait = FALSE,   args.psn.execute,   update.only = FALSE,   nmquiet = FALSE,   method.execute = \"psn\",   dir.psn,   path.nonmem,   system.type,   files.needed,   quiet = FALSE )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute Nonmem and archive input data with model files — NMexec","text":"files File paths models (control streams) run nonmem . See file.pattern . file.pattern Alternatively files, can supply regular expression passed list.files pattern argument. used, use dir argument well. Also see data.file process models use specific data file. dir file.pattern used, dir directory search control streams . sge Use sge queing system. Default TRUE. Disable quick models wait queue run job. input.archive function model file path generate path archive input data RDS. Set NULL archive data. nc Number cores use sending cluster. used method.execute=\"psn\", sge=TRUE. Default 64. dir.data directory data file stored. normally needed data found using path control stream. argument may removed future since needed. wait Wait process finish making R console available ? useful calling NMexec function needs wait output Nonmem run available processing. args.psn.execute character string arguments passed execute. Default \"-model_dir_name -nm_output=xml,ext,cov,cor,coi,phi,shk\". update.run model(s) control stream data updated since last run? nmquiet Suppress terminal output `Nonmem`. likely work linux/unix systems. method.execute run Nonmem. Must one 'psn',     'nmsim', 'direct'. psn PSN's execute used. supports parallel Nonmem runs. Use nc argument control many cores use job. estimation runs, likely better choice, PSN installed. See dir.psn argument . nmsim Creates temporary directory runs Nonmem inside directory copying relevant results files back folder input control stream . sge=TRUE, job submitted cluster, parallel execution job supported. See path.nonmem argument . direct Nonmem called directly control stream. simplest method least convenient cases. offer parallel runs leaves Nonmem output files next control streams. See `sge` well. dir.psn directory find PSN executables. needed searchable system path, user want explicit find (.e. want use specific installed version PSN). path.nonmem path nonmem executable. used method.execute=\"direct\" method.execute=\"nmsim\" (default). argument supplied, NMexec try run nmfe75, .e. available path underlying shell. default value can modified using NMdata::NMdataConf, like NMdataConf(path.nonmem=\"/path//nonmem\") system.type charachter string, either \\\"windows\\\" \\\"linux\\\" - case insensitive. Windows experimentally supported. Default use Sys.info()[[\"sysname\"]]. files.needed case method.execute=\"nmsim\", argument specifies files copied temporary directory Nonmem run. Input control stream simulation input data need specified. quiet Suppress messages NMexec ? Default FALSE.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute Nonmem and archive input data with model files — NMexec","text":"NULL (invisibly)","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute Nonmem and archive input data with model files — NMexec","text":"Use read archived input data retrieving     nonmem results:     NMdataConf(file.data=inputArchiveDefault) Since `NMexec` typically used simulations directly (`NMsim` natural interface purpose), default method `NMexec` currently use `method.execute=\"psn\"` point methods allow multi-core execution single Nonmem job (NB: `method.execute=\"NMsim\"` can run multiple jobs parallel normally sufficient simulations).","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute Nonmem and archive input data with model files — NMexec","text":"","code":"file.mod <- \"run001.mod\" if (FALSE) { ## run locally - not on cluster NMexec(file.mod,sge=FALSE) ## run on cluster with 16 cores. 64 cores is default NMexec(file.mod,nc=16) ## submit multiple models to cluster multiple.models <- c(\"run001.mod\",\"run002.mod\") NMexec(multiple.models,nc=16) ## run all models called run001.mod - run099.mod if updated. 64 cores to each. NMexec(file.pattern=\"run0..\\\\.mod\",dir=\"models\",nc=16,update.only=TRUE) }"},{"path":"https://philipdelff.github.io/NMsim/reference/NMexecDirectory.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute Nonmem inside a dedicated directory — NMexecDirectory","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"Like PSN's execute less features. easier control NMexec. NMexecDirectory intended run user. Use NMexec NMsim instead.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexecDirectory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"","code":"NMexecDirectory(   file.mod,   path.nonmem,   files.needed,   dir.data = \"..\",   system.type )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMexecDirectory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"file.mod Path Nonmem input control stream. path.nonmem Path Nonmem executable. may want control NMdata::NMdataConf. files.needed Files needed run control stream. cold .phi file etas read. Notice, input data set handled automatically, need specify . dir.data NULL, data copied temporary directory, Nonmem read . NULL, dir.data must relative path Nonmem run input data file stored. \"..\" run directory created directory data stored.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMexecDirectory.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute Nonmem inside a dedicated directory — NMexecDirectory","text":"bash shell script execution Nonmem","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMgenPNM.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate PNM file for sge clusters — NMgenPNM","title":"Generate PNM file for sge clusters — NMgenPNM","text":"Generate PNM file sge clusters","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMgenPNM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate PNM file for sge clusters — NMgenPNM","text":"","code":"NMgenPNM(nc, file)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMgenPNM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate PNM file for sge clusters — NMgenPNM","text":"nc number cores wanted file file path write result ","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMgenPNM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate PNM file for sge clusters — NMgenPNM","text":"file path (character string)","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in data file — NMreadCov","title":"Read in data file — NMreadCov","text":"Read data file","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in data file — NMreadCov","text":"","code":"NMreadCov(file, ...)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in data file — NMreadCov","text":"file .cov covariance Nonmem matrix file read ... Passed fread","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in data file — NMreadCov","text":"matrix covariance step NONMEM","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in data file — NMreadCov","text":"function taken nonmem2rx::nmcov     based function NMdata.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadCov.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Read in data file — NMreadCov","text":"Philip Delff Matthew L. Fidler","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Read simulation results based on NMsim's track of model runs — NMreadSim","title":"Read simulation results based on NMsim's track of model runs — NMreadSim","text":"Read simulation results based NMsim's track model runs","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read simulation results based on NMsim's track of model runs — NMreadSim","text":"","code":"NMreadSim(   x,   check.time = FALSE,   dir.sims,   wait = FALSE,   quiet = FALSE,   progress,   as.fun )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read simulation results based on NMsim's track of model runs — NMreadSim","text":"x Path simulation-specific rds file generated NMsim, typically called `NMsim_paths.rds`. Can also table simulation runs stored `rds` files `NMsim`. latter almost never used. check.time found, check whether `fst` file modification time newer `rds` file. `fst` generated based information `rds`, notice systems preserve file modification times. Becasue , `check.time` `FALSE` default. dir.sims default, `NMreadSim` use information relative path results table file (`_paths.rds`) Nonmem simulation results. paths changed, reasons work, can use `dir.sims` argument specify find Nonmem simulation results. `.fst` file already generated found next `_paths.rds`, path Nonmem simulation results used. wait simulations seem done yet, wait finish? , error thrown. choose wait, risk results never come. `NMreadSim` waiting `lst` file. Nonmem fails, normally generate `lst` file. `NMTRAN` fails (checks control stream prior running Nonmem), `lst` file generated.  Default wait. quiet Turn messages going ? Default report messages. progress Track progress? Default `TRUE` `quiet` FALSE one model read. progress tracking based number models completed/read, status individual models. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read simulation results based on NMsim's track of model runs — NMreadSim","text":"data set class defined .fun","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimModTab.html","id":null,"dir":"Reference","previous_headings":"","what":"Read simulation results from rds objects and/or NMsimModTab objects — NMreadSimModTab","title":"Read simulation results from rds objects and/or NMsimModTab objects — NMreadSimModTab","text":"Read simulation results rds objects /NMsimModTab objects","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimModTab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read simulation results from rds objects and/or NMsimModTab objects — NMreadSimModTab","text":"","code":"NMreadSimModTab(   x,   check.time = FALSE,   dir.sims,   wait = FALSE,   skip.missing = FALSE,   quiet = FALSE,   progress,   as.fun )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimModTab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read simulation results from rds objects and/or NMsimModTab objects — NMreadSimModTab","text":"x Path simulation-specific rds file generated NMsim, typically called `NMsim_paths.rds`. Can also table simulation runs stored `rds` files `NMsim`. latter almost never used. check.time found, check whether `fst` file modification time newer `rds` file. `fst` generated based information `rds`, notice systems preserve file modification times. Becasue , `check.time` `FALSE` default. dir.sims default, `NMreadSim` use information relative path results table file (`_paths.rds`) Nonmem simulation results. paths changed, reasons work, can use `dir.sims` argument specify find Nonmem simulation results. `.fst` file already generated found next `_paths.rds`, path Nonmem simulation results used. wait simulations seem done yet, wait finish? , error thrown. choose wait, risk results never come. `NMreadSim` waiting `lst` file. Nonmem fails, normally generate `lst` file. `NMTRAN` fails (checks control stream prior running Nonmem), `lst` file generated.  Default wait. quiet Turn messages going ? Default report messages. progress Track progress? Default `TRUE` `quiet` FALSE one model simulated. progress tracking based number models completed, status individual models. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimModTabOne.html","id":null,"dir":"Reference","previous_headings":"","what":"Read simulation results from an rds or a NMsimModTab object — NMreadSimModTabOne","title":"Read simulation results from an rds or a NMsimModTab object — NMreadSimModTabOne","text":"Read simulation results rds NMsimModTab object","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimModTabOne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read simulation results from an rds or a NMsimModTab object — NMreadSimModTabOne","text":"","code":"NMreadSimModTabOne(   modtab,   check.time = FALSE,   dir.sims,   wait = FALSE,   quiet = FALSE,   skip.missing = FALSE,   progress,   as.fun )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimModTabOne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read simulation results from an rds or a NMsimModTab object — NMreadSimModTabOne","text":"check.time found, check whether `fst` file modification time newer `rds` file. `fst` generated based information `rds`, notice systems preserve file modification times. Becasue , `check.time` `FALSE` default. dir.sims default, `NMreadSim` use information relative path results table file (`_paths.rds`) Nonmem simulation results. paths changed, reasons work, can use `dir.sims` argument specify find Nonmem simulation results. `.fst` file already generated found next `_paths.rds`, path Nonmem simulation results used. wait simulations seem done yet, wait finish? , error thrown. choose wait, risk results never come. `NMreadSim` waiting `lst` file. Nonmem fails, normally generate `lst` file. `NMTRAN` fails (checks control stream prior running Nonmem), `lst` file generated.  Default wait. quiet Turn messages going ? Default report messages. progress Track progress? Default `TRUE` `quiet` FALSE one model read. progress tracking based number models completed/read, status individual models. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimRes.html","id":null,"dir":"Reference","previous_headings":"","what":"Read simulation results from data.frames or fst files — NMreadSimRes","title":"Read simulation results from data.frames or fst files — NMreadSimRes","text":"Read simulation results data.frames fst files","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimRes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read simulation results from data.frames or fst files — NMreadSimRes","text":"","code":"NMreadSimRes(x)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimRes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read simulation results from data.frames or fst files — NMreadSimRes","text":"x data set fst file","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimResOne.html","id":null,"dir":"Reference","previous_headings":"","what":"read one sim element. This will be run in lapply in NMreadSim. — NMreadSimResOne","title":"read one sim element. This will be run in lapply in NMreadSim. — NMreadSimResOne","text":"read one sim element. run lapply NMreadSim.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimResOne.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read one sim element. This will be run in lapply in NMreadSim. — NMreadSimResOne","text":"","code":"NMreadSimResOne(x)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimResOne.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read one sim element. This will be run in lapply in NMreadSim. — NMreadSimResOne","text":"x path fst file data set","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreadSimResOne.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"read one sim element. This will be run in lapply in NMreadSim. — NMreadSimResOne","text":"data.table","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreplaceInits.html","id":null,"dir":"Reference","previous_headings":"","what":"Replace initial values in Nonmem control stream — NMreplaceInits","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"Replace initial values Nonmem control stream","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreplaceInits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"","code":"NMreplaceInits(inits, fix = FALSE, ...)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMreplaceInits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"inits data.frame new initial estimates, style returned NMdata::NMreadExt. Column` par.type` can contain elements THETA, OMEGA, SIGMA. fix Fix initial values? Default . ... Passed NMdata::NMwriteSection. important NMreplaceInits run .","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMreplaceInits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replace initial values in Nonmem control stream — NMreplaceInits","text":"modified control stream","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMseed.html","id":null,"dir":"Reference","previous_headings":"","what":"Add seed string to simulation model data.table — NMseed","title":"Add seed string to simulation model data.table — NMseed","text":"internal NMsim function.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMseed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add seed string to simulation model data.table — NMseed","text":"","code":"NMseed(models, nseeds, dist, values, fun.seed = seedFunDefault)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMseed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add seed string to simulation model data.table — NMseed","text":"models data.frame containing model paths etc created NMsim(). nseeds Number seeds simulation control stream. Default match length dist. dist Distribution random sources. character strings pasted directly Nonem control streams seed values. Default \"\" means one normal distribution. dist=c(\"\",\"UNIFORM\") give two seeds random sources following normal uniform distribution. values Optionally, seed values. can data.frame many columns random sources.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMseed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add seed string to simulation model data.table — NMseed","text":"updated data.table simulation model information     including seed strings.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from an estimated Nonmem model — NMsim","title":"Simulate from an estimated Nonmem model — NMsim","text":"Supply data set estimation input control stream, NMsim can create neccesary files (control stream, data files), run simulation read results. additional methods simulation types available, can multiple simulations . Please see vignettes introduction get .","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from an estimated Nonmem model — NMsim","text":"","code":"NMsim(   file.mod,   data,   dir.sims,   name.sim,   order.columns = TRUE,   file.ext = NULL,   script = NULL,   subproblems = NULL,   reuse.results = FALSE,   seed.R,   seed.nm,   args.psn.execute,   table.vars,   table.options,   text.sim = \"\",   method.sim = NMsim_default,   typical = FALSE,   execute = TRUE,   sge = FALSE,   nc = 1,   transform = NULL,   method.execute,   method.update.inits,   create.dirs = TRUE,   dir.psn,   modify.model,   sim.dir.from.scratch = TRUE,   col.row,   args.NMscanData,   path.nonmem = NULL,   nmquiet = TRUE,   progress,   as.fun,   suffix.sim,   text.table,   system.type = NULL,   dir.res,   file.res,   wait,   quiet = FALSE,   check.mod = TRUE,   seed,   list.sections,   format.data.complete = \"rds\",   ... )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from an estimated Nonmem model — NMsim","text":"file.mod Path(s) input control stream(s) run simulation . output control stream now assumed stored next input control stream ending .lst instead .mod. .ext file must also present. simulating known subjects, .phi necessary . data simulation data data.frame list data.frames. list, model(s) run data sets list. dir.sims directory NMsim store generated files. Default create folder called `NMsim` next `file.mod`. name.sim Give filenames related simulation suffix. short string describing sim recommended like \"ph3_regimens\". order.columns reorder columns calling NMdata::NMorderColumns saving dataset running simulations? Default TRUE. file.ext Optionally provide parameter estimate file Nonmem. normally needed since `NMsim` default use ext file stored next input control stream (replacing file name extension `.ext`). using method.update.inits=\"psn\", argument used. want provide parameters used simulation, look `ext` argument `NMsim_VarCov`. script path script run. stamping dataset results can traced back code. subproblems Number subproblems use SUBPROBLEMS $SIMULATION block Nonmem. default subproblem=0 means use SUBPROBLEMS. reuse.results simulation results found file, used? TRUE reading results fail, simulations still rerun. seed.R value passed set.seed(). may better use seed.R rather calling set.seed() manually seed can captured stored NMsim() reproducibility. See seed.nm finer control seeds used Nonmem control streams. seed.nm Control Nonmem seeds. numeric, vector     `data.frame`, used seed values (single     value vector recycled make sure dimesnsions     right, number columns data.frame     dictate number seeds Nonmem control stream. Use     list elements `values`, `dist` others     detailed control random sources. See ?NMseed     details arguments can passed way. Default draw seeds betwen     0 2147483647 (values supported Nonmem)     simulation. can pass function evaluated     (say choose different pool seeds draw ). avoid changing exisiting seed control stream, use seed.nm=\"asis\". case method.sim=NMsim_EBE, seeds used. args.psn.execute charachter string passed arguments PSN's `execute`. table.vars Variables printed output table character vector space-separated string variable names. default export tables listed input control stream. table.vars provided, output tables estimation control streams dropped replaced new one just provided variables. many variables exported, much fewer used, can speed NMsim significantly export needed (sometimes little \"PRED IPRED\"). Nonmem writes data slowly reducing output data can make big difference execution time. See table.options . table.options character vector string space-separated options. used table.vars provided. constructing new output table table.vars default add two options, NOAPPEND NOPRINT. can modeify table.options. try modify output filename - NMsim takes care . text.sim character string pasted $SIMULATION. must contain seed SUBPROBLEM handled separately. Default include \"ONLYSIM\". avoid , use text.sim=\"\". method.sim function (quoted) creates simulation control stream necessary files simulation based estimation control stream, data, etc. default called NMsim_default replace estimation covariance step simulation step. See details section oter methods, see examples especially vignettes use different provided methods. typical Run ETAs fixed zero? Technically ETAs=0 obtained replacing $OMEGA zero matrix. Default FALSE. execute Execute simulation prepare ? `execute=FALSE` can useful want additional tweaks simulate using parameter estimates. sge Submit cluster? Default , useful creating large number simulations, e.g. simulate parameter estimates bootstrap result. nc Number cores used parallelization. far supported method.execute=\"psn\". transform list defining transformations applied Nonmem simulations plotting. list element, name refers name column transform, contents must function apply. method.execute Specify call Nonmem. Options \"psn\" (PSN's execute), \"nmsim\" (internal method similar PSN's execute), \"direct\" (just run Nonmem directly dump temporary files). \"nmsim\" advantages \"psn\" makes supported method type.sim=\"NMsim_EBE\". \"psn\" simple advantage path nonmem specified \"execute\" system search path. long know Nonmem executable , \"nmsim\" recommended. default \"nmsim\" path.nonmem specified, \"psn\" . method.update.inits initial values parameters     updated estimated model running     simulation. NMsim can native function use     PSN - step can skipped update     values. possible values \"psn\"     uses PSN's \"update_inits\". Requires functioning PSN     installation possibly dir.psn correctly     set. advantages method keeps comments     control stream method known many. \"nmsim\"  Uses simple internal method update parameter values based ext file.  advantages \"nmsim\" require PSN, robust. \"nmsim\" fixes whole OMEGA SIGMA matrices single blocks making $OMEGA $SIGMA sections control streams less easy read. hand, method robust avoids interpretation BLOCK structure code control streams. \"none\" nothing. useful model simulate estimated parameter values manually put respective sections control stream. create.dirs directories specified dir.sims dir.res exists, created? Default TRUE. dir.psn directory find PSN's executables ('execute' 'update_inits'). default rely system's search path. can run 'execute' 'update_inits' just typing terminal, need specify unless want explicitly use specific installation PSN system. modify.model Named list additional control stream section edits. Note, can functions define edit sections. advanced feature needed run simulations. however powerful types analyses, like modifying parameter values. See vignettes information. Documentation still development. sim.dir..scratch TRUE (default) wipe simulation directory running new simulations. directory emptied _not_ dir.sims may keep many simulations. subdirectory named based run name name.sim. reason advised wipe directory previous simulation created simulation runs now obsolete, end reading collecting results. NMsim delete previously generated simulation control streams name, option goes . example important first ran 1000 replications, fixed something now rand 500. choose FALSE , can end results 500 new 500 old simulations. col.row used data supplied (likely simulations VPCs) column name use row identifier. none supplied, NMdataConf()[['col.row']] used. column already exists data set, used , added. args.NMscanData execute=TRUE&sge=FALSE, NMsim normally read results using NMreadSim. Use argument pass additional arguments (list) function want results read specific way. can model reason drops rows, need merge row identifier. `args.NMscanData=list(col.row=\"ROW\")` merge column called `ROW`. used rare cases. path.nonmem path Nonmem executable use. something like \"/usr/local/NONMEM/run/nmfe75\" (made example). default available. able figure normally execute Nonmem, ask colleague. nmquiet Silent messages Nonmem. default `TRUE`. progress Track progress? Default `TRUE` `quiet` FALSE one model simulated. progress tracking based number models completed, status individual models. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf. suffix.sim Deprecated. Use name.sim instead. text.table character string including variables export Nonmem. system.type charachter string, either \\\"windows\\\" \\\"linux\\\" - case insensitive. Windows experimentally supported. Default use Sys.info()[[\"sysname\"]]. dir.res Provide path directory save rds files paths results. Default use dir.sims. running `NMreadSim()` files, original simulation files can deleted. Hence, providing `dir.sims` `dir.res` provides structure simple clean. `dir.sims` can purged `NMreadSim` run small `rds` `fst` files kept `dir.res`. Notice, case multiple models simulated, multiple `rds` (read `NMreadSim()`) files created default. cases multiple models simulated, see `file.res` get just one file refering simulation results. file.res Path rds file contain table simulated models metadata. needed subsequently retrieving results using `NMreadSim()`. default create file called `NMsim_..._paths.rds` dir.res directory ... based model name. However, multiple models (file.mod) simulated, result multiple rds files. Specifying path ensures one rds file containing information simulated models created. Notice file.res supplied, dir.res used. wait Wait simulations finish? Default simulations run locally sent cluster. Waiting means results read simulations done. waiting, path(s) `rds` files read returned. Pass `NMreadSim()` (also supports waiting simulations finish). quiet TRUE, messages going suppressed. check.mod Check provided control streams contents may cause issues simulation. Default `TRUE`, recommended disable fully aware feature control stream, know impacts simulation, want get rid warnings. seed Deprecated. See seed.R seed.nm. format.data.complete development purposes - users need argument. Controls format complete input data set saved .  Possible values `rds` (default), `fst` (experimental) `csv`. `fst` may faster use less disk space factor levels may lost input data output data. `csv` also lead loss additional information factor levels. ... Additional arguments passed method.sim.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from an estimated Nonmem model — NMsim","text":"data.frame simulation results (number rows     input data). `sge=TRUE` character vector paths     simulation control streams.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate from an estimated Nonmem model — NMsim","text":"Loosely speaking, argument method.sim defines     _what_ NMsim , method.execute define _how_     . method.sim takes function converts     estimation control stream whatever     run. Features like replacing `$INPUT`, `$DATA`, `$TABLE`,     handling seeds NMsim features done addition     method.sim. Also modeify.model argument     handled addition method.sim.     subproblems seed arguments available     methods creating $SIMULATION section. Notice, following functions internally available `NMsim` can run say method.sim=NMsim_EBE without quotes. see code method, type NMsim_EBE. NMsim_default default behaviour. Replaces $ESTIMATION $COVARIANCE sections $SIMULATION section. NMsim_asis simplest method. nothing (, NMsim handles `$INPUT`, `$DATA`, `$TABLE` . Use instance already created simulation (estimation actually) control stream want NMsim run different data sets. NMsim_typical Deprecated. Use typical=TRUE instead. NMsim_EBE Simulates _known_ ETAs. default, ETA values automatically taken estimation run. refered emperical Bayes estimates, hence name method \"NMsim_EBE\". However, user can also provide different `.phi` file may contain simulated ETA values (see `file.phi` argument). ID values simulation data set must match ID values phi file step work. refering estimated subjects, .phi file estimation run must found next .lst file estimation file name stem (say `run1.lst` `run1.phi`). , ID values (simulation) input data must ID values used estimation . method Runs $ESTIMATION MAXEVAL=0 pulls ETAs ID's found data. $SIMULATION step run unfortunately means residual error simulated. NMsim_VarCov Like NMsim_default `$THETA`, `$OMEGA`, `SIGMA` drawn distribution estimated covariance step. means successful covariance step must available estimation. NB. multivariate normal distribution used parameters, including `$OMEGA` `$SIGMA` correct way . case simulation leads negative diagonal elements $OMEGA $SIGMA, values truncated zero. method valid simulation `$THETA` variability. method accepts table parameter values can produced tools `NMsim`. simulation parameter variability based bootstrap results, use NMsim_default.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimCheckMod.html","id":null,"dir":"Reference","previous_headings":"","what":"Check a simulation control streams for things that can cause trouble in NMsim — NMsimCheckMod","title":"Check a simulation control streams for things that can cause trouble in NMsim — NMsimCheckMod","text":"Check simulation control streams things can cause trouble NMsim","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimCheckMod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check a simulation control streams for things that can cause trouble in NMsim — NMsimCheckMod","text":"","code":"NMsimCheckMod(file.mod)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimCheckMod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check a simulation control streams for things that can cause trouble in NMsim — NMsimCheckMod","text":"file.mod control stream check","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimModTabOperations.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","title":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","text":"Remove NMsimModTab class discard NMsimModTab meta data Check object 'NMsimModTab' Basic arithmetic NMsimModTab objects","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimModTabOperations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","text":"","code":"unNMsimModTab(x)  is.NMsimModTab(x)  # S3 method for NMsimModTab merge(x, ...)  # S3 method for NMsimModTab t(x, ...)  # S3 method for NMsimModTab dimnames(x, ...)  # S3 method for NMsimModTab rbind(x, ...)  # S3 method for NMsimModTab cbind(x, ...)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimModTabOperations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","text":"x NMsimModTab object ... arguments passed methods.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimModTabOperations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","text":"x stripped 'NMsimModTab' class logical x 'NMsimModTab' object object class 'NMsimModTab'.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimModTabOperations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove NMsimModTab class and discard NMsimModTab meta data — unNMsimModTab","text":"'dimnames', 'merge', 'cbind', 'rbind', 't'     called 'NMsimModTab' object, 'NMsimModTab' class dropped,     operation performed. 'NMsimModTab' object     inherits 'data.frame' classes (    default), operations performed using     'data.frame' methods. example, use '.fun'     get 'data.table' 'tbl', respective methods used     instead.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimResOperations.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","title":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","text":"Remove NMsimRes class discard NMsimRes meta data Check object 'NMsimRes' Basic arithmetic NMsimRes objects","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimResOperations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","text":"","code":"unNMsimRes(x)  is.NMsimRes(x)  # S3 method for NMsimRes merge(x, ...)  # S3 method for NMsimRes t(x, ...)  # S3 method for NMsimRes dimnames(x, ...)  # S3 method for NMsimRes rbind(x, ...)  # S3 method for NMsimRes cbind(x, ...)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimResOperations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","text":"x NMsimRes object ... arguments passed methods.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimResOperations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","text":"x stripped 'NMsimRes' class logical x 'NMsimRes' object object class 'NMsimRes'.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsimResOperations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Remove NMsimRes class and discard NMsimRes meta data — unNMsimRes","text":"'dimnames', 'merge', 'cbind', 'rbind', 't'     called 'NMsimRes' object, 'NMsimRes' class dropped,     operation performed. 'NMsimRes' object     inherits 'data.frame' classes (    default), operations performed using     'data.frame' methods. example, use '.fun'     get 'data.table' 'tbl', respective methods used     instead.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_EBE.html","id":null,"dir":"Reference","previous_headings":"","what":"Use emperical Bayes estimates to simulate re-using ETAs — NMsim_EBE","title":"Use emperical Bayes estimates to simulate re-using ETAs — NMsim_EBE","text":"Simulation reusing ETA values estimation run otherwise specified ETA values. observed subjects, refered emperical Bayes estimates (EBE). .phi file estimation run must found next .lst file estimation.means ID values (simulation) input data must ID values used estimation . Runs $ESTIMATION MAXEVAL=0 pulls ETAs ID's found data. $SIMULATION step run may affect instance residual variability simulated, . can also specify different .phi file can simulation result.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_EBE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use emperical Bayes estimates to simulate re-using ETAs — NMsim_EBE","text":"","code":"NMsim_EBE(file.sim, file.mod, data.sim, file.phi, return.text = FALSE)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_EBE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use emperical Bayes estimates to simulate re-using ETAs — NMsim_EBE","text":"file.sim See ?NMsim. file.mod See ?NMsim. data.sim See ?NMsim. file.phi phi file take known subjects . default replace filename extension file.mod .phi. different .phi file used want reuse subjects simulated previous simulation. return.text TRUE, just text returned, resulting control stream written file.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_EBE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use emperical Bayes estimates to simulate re-using ETAs — NMsim_EBE","text":"Path simulation control stream","code":""},{"path":[]},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_VarCov.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate with parameter values sampled from a covariance step — NMsim_VarCov","title":"Simulate with parameter values sampled from a covariance step — NMsim_VarCov","text":"Like NMsim_default `$THETA`, `$OMEGA`, `SIGMA` drawn distribution estimated covariance step. means successful covariance step must available estimation. case simulation leads negative diagonal elements $OMEGA $SIGMA, values truncated zero. simulation parameter variability based bootstrap results, use NMsim_default.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_VarCov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate with parameter values sampled from a covariance step — NMsim_VarCov","text":"","code":"NMsim_VarCov(file.sim, file.mod, data.sim, nsims, ext, write.ext = NULL)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_VarCov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate with parameter values sampled from a covariance step — NMsim_VarCov","text":"file.sim See ?NMsim. file.mod See ?NMsim. data.sim See ?NMsim. nsims Number replications wanted. default 1. greater, multiple control streams generated. ext Parameter values long format created `readParsWide` `NMdata::NMreadExt`. write.ext supplied, path rds file parameter values used simulation saved.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_VarCov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate with parameter values sampled from a covariance step — NMsim_VarCov","text":"Character vector simulation control stream paths","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_asis.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation method that uses the provided control stream as is — NMsim_asis","title":"Simulation method that uses the provided control stream as is — NMsim_asis","text":"simplest method. nothing (, NMsim handles `$INPUT`, `$DATA`, `$TABLE` . Use instance already created simulation (estimation actually) control stream want NMsim run different data sets.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_asis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation method that uses the provided control stream as is — NMsim_asis","text":"","code":"NMsim_asis(file.sim, file.mod, data.sim)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_asis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation method that uses the provided control stream as is — NMsim_asis","text":"file.sim See ?NMsim. file.mod See ?NMsim. data.sim See ?NMsim.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_asis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation method that uses the provided control stream as is — NMsim_asis","text":"Path simulation control stream","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform an estimated Nonmem model into a simulation control stream — NMsim_default","title":"Transform an estimated Nonmem model into a simulation control stream — NMsim_default","text":"default behaviour NMsim. Replaces $ESTIMATION $COVARIANCE sections $SIMULATION section.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform an estimated Nonmem model into a simulation control stream — NMsim_default","text":"","code":"NMsim_default(   file.sim,   file.mod,   data.sim,   nsims = 1,   replace.sim = TRUE,   return.text = FALSE )"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform an estimated Nonmem model into a simulation control stream — NMsim_default","text":"file.sim See ?NMsim. file.mod See ?NMsim. data.sim See ?NMsim. nsims Number replications wanted. default 1. greater, multiple control streams generated. replace.sim $SIMULATION section contents file.sim, replaced? Default yes. See list.section argument NMsim provide custom contents sections NMsim instead editing control streams beforehand. return.text TRUE, just text returned, resulting control stream written file.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform an estimated Nonmem model into a simulation control stream — NMsim_default","text":"Character vector simulation control stream paths","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_known.html","id":null,"dir":"Reference","previous_headings":"","what":"NMsim_known is an old name for NMsim_EBE() — NMsim_known","title":"NMsim_known is an old name for NMsim_EBE() — NMsim_known","text":"NMsim_known old name NMsim_EBE()","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_known.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NMsim_known is an old name for NMsim_EBE() — NMsim_known","text":"","code":"NMsim_known(...)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_known.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NMsim_known is an old name for NMsim_EBE() — NMsim_known","text":"... Everything passed NMsim_EBE()","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_typical.html","id":null,"dir":"Reference","previous_headings":"","what":"Typical subject simiulation method — NMsim_typical","title":"Typical subject simiulation method — NMsim_typical","text":"Like NMsim_default ETAs=0, giving \"typical subject\" simulation. confuse \"reference subject\" simulation covariate values. Technically ETAs=0 obtained replacing $OMEGA zero matrix.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_typical.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Typical subject simiulation method — NMsim_typical","text":"","code":"NMsim_typical(file.sim, file.mod, data.sim, return.text = FALSE)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_typical.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Typical subject simiulation method — NMsim_typical","text":"file.sim See ?NMsim. file.mod See ?NMsim. data.sim See ?NMsim. return.text TRUE, just text returned, resulting control stream written file.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMsim_typical.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Typical subject simiulation method — NMsim_typical","text":"Path simulation control stream","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMupdateInits.html","id":null,"dir":"Reference","previous_headings":"","what":"Create new Nonmem control stream with updated initial parameter values — NMupdateInits","title":"Create new Nonmem control stream with updated initial parameter values — NMupdateInits","text":"Create new Nonmem control stream updated initial parameter values","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMupdateInits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create new Nonmem control stream with updated initial parameter values — NMupdateInits","text":"","code":"NMupdateInits(file.mod, file.ext, newfile, fix)"},{"path":"https://philipdelff.github.io/NMsim/reference/NMupdateInits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create new Nonmem control stream with updated initial parameter values — NMupdateInits","text":"file.mod control stream update. edited. file.ext  newfile New file generate fix Fix values? Probably TRUE supported. Passed NMreplaceInits().","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/NMupdateInits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create new Nonmem control stream with updated initial parameter values — NMupdateInits","text":"resulting control stream path(s)","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":null,"dir":"Reference","previous_headings":"","what":"Add simulation records to dosing records — addEVID2","title":"Add simulation records to dosing records — addEVID2","text":"Performs simple job adding simulation events subjects data set. Copies columns varying subject level (.e. non-variying covariates).","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add simulation records to dosing records — addEVID2","text":"","code":"addEVID2(doses, time.sim, CMT, EVID = 2, as.fun)"},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add simulation records to dosing records — addEVID2","text":"doses dosing records Nonmem style (EVID==1 records data set) time.sim numerical vector simulation times. Can also data.frame case must contain `TIME` column merged subjects found `doses`. latter feature experimental. CMT compartment insert EVID=2 records. longer one, records repeated specified compartments. data.frame, covariates can specified. EVID value put EVID column created rows. Default 2 0 may prefered even simulation. .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add simulation records to dosing records — addEVID2","text":"data.frame dosing records","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add simulation records to dosing records — addEVID2","text":"resulting data set ordered ID, TIME,     EVID. may reorder specific needs.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addEVID2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add simulation records to dosing records — addEVID2","text":"","code":"(doses1 <- NMcreateDoses(TIME=c(0,12,24,36),AMT=c(2,1))) #>   ID TIME EVID CMT AMT MDV #> 1  1    0    1   1   2   1 #> 2  1   12    1   1   1   1 #> 3  1   24    1   1   1   1 #> 4  1   36    1   1   1   1 addEVID2(doses1,time.sim=seq(0,28,by=4),CMT=2) #>    ID TIME EVID CMT AMT MDV DV #> 1   1    0    1   1   2   1 NA #> 2   1    0    2   2  NA   1 NA #> 3   1    4    2   2  NA   1 NA #> 4   1    8    2   2  NA   1 NA #> 5   1   12    1   1   1   1 NA #> 6   1   12    2   2  NA   1 NA #> 7   1   16    2   2  NA   1 NA #> 8   1   20    2   2  NA   1 NA #> 9   1   24    1   1   1   1 NA #> 10  1   24    2   2  NA   1 NA #> 11  1   28    2   2  NA   1 NA #> 12  1   36    1   1   1   1 NA  ## two named compartments dt.doses <- NMcreateDoses(TIME=c(0,12),AMT=10,CMT=1) seq.time <- c(0,4,12,24) dt.cmt <- data.frame(CMT=c(2,3),analyte=c(\"parent\",\"metabolite\")) res <- addEVID2(dt.doses,time.sim=seq.time,CMT=dt.cmt)  ## Separate sampling schemes depending on covariate values dt.doses <- NMcreateDoses(TIME=data.frame(regimen=c(\"SD\",\"MD\",\"MD\"),TIME=c(0,0,12)),AMT=10,CMT=1)  seq.time.sd <- data.frame(regimen=\"SD\",TIME=seq(0,6)) seq.time.md <- data.frame(regimen=\"MD\",TIME=c(0,4,12,24)) seq.time <- rbind(seq.time.sd,seq.time.md) addEVID2(dt.doses,time.sim=seq.time,CMT=2) #>    ID TIME EVID CMT AMT MDV regimen DV #> 1   1    0    1   1  10   1      SD NA #> 2   1    0    2   2  NA   1      SD NA #> 3   1    1    2   2  NA   1      SD NA #> 4   1    2    2   2  NA   1      SD NA #> 5   1    3    2   2  NA   1      SD NA #> 6   1    4    2   2  NA   1      SD NA #> 7   1    5    2   2  NA   1      SD NA #> 8   1    6    2   2  NA   1      SD NA #> 9   2    0    1   1  10   1      MD NA #> 10  2    0    2   2  NA   1      MD NA #> 11  2    4    2   2  NA   1      MD NA #> 12  2   12    1   1  10   1      MD NA #> 13  2   12    2   2  NA   1      MD NA #> 14  2   24    2   2  NA   1      MD NA  ## an observed sample scheme and additional simulation times df.doses <- NMcreateDoses(TIME=0,AMT=50,addl=list(ADDL=2,II=24)) dense <- c(seq(1,3,by=.1),4:6,seq(8,12,by=4),18,24) trough <- seq(0,3*24,by=24) sim.extra <- seq(0,(24*3),by=2) time.all <- c(dense,dense+24*3,trough,sim.extra) time.all <- sort(unique(time.all)) dt.sample <- data.frame(TIME=time.all) dt.sample$isobs <- as.numeric(dt.sample$TIME%in%c(dense,trough)) dat.sim <- addEVID2(dt.doses,time.sim=dt.sample,CMT=2)"},{"path":"https://philipdelff.github.io/NMsim/reference/addResVar.html","id":null,"dir":"Reference","previous_headings":"","what":"Add residual variability based on parameter estimates — addResVar","title":"Add residual variability based on parameter estimates — addResVar","text":"Add residual variability based parameter estimates","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addResVar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add residual variability based on parameter estimates — addResVar","text":"","code":"addResVar(   data,   path.ext,   prop = NULL,   add = NULL,   log = FALSE,   par.type = \"SIGMA\",   trunc0 = TRUE,   scale.par,   subset,   seed,   col.ipred = \"IPRED\",   col.ipredvar = \"IPREDVAR\",   as.fun )"},{"path":"https://philipdelff.github.io/NMsim/reference/addResVar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add residual variability based on parameter estimates — addResVar","text":"data data set containing indiviudual predictions. Often result NMsim. path.ext Path ext file take parameter estimates . prop Parameter number parameter holding variance proportional error component. ERR(1) used proportional error, use prop=1. Can also refer theta number. add Parameter number parameter holding variance additive error component. ERR(1) used additive error, use add=1. Can also refer theta number. log error added log scale? used obtain exponential error distribution. par.type Use \"sigma\" variances estimated SIGMA matrix. Use \"theta\" THETA parameters used. See `scale.par` . trunc0 log=FALSE, truncate simulated values 0? trunc0, returned predictions can negative. scale.par Denotes parmeter represents variance standard deviation. Allowed values default value depends `par.type`. par.type=\"sigma\" \"var\" allowed. par.type=\"theta\" allowed values \"sd\" \"var\". Default \"sd\". subset character string expression denoting subset add residual error. Example: subset=\"DVID==''\" seed number pass set.seed() simulating. Default generate seed report console. Use seed=FALSE avoid setting seed (prefer otherwise). col.ipred name column containing individual predictions. col.ipredvar name column created addResVar contain simulated observations (individual predictions plus residual error). .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addResVar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add residual variability based on parameter estimates — addResVar","text":"updated data.frame","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/addResVar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add residual variability based on parameter estimates — addResVar","text":"","code":"if (FALSE) { ## based on SIGMA simres.var <- addResVar(data=simres,                         path.ext = \"path/to/model.ext\",                         prop = 1,                         add = 2,                         par.type = \"SIGMA\",                         log = FALSE)  ## If implemented using THETAs simres.var <- addResVar(data=simres,                         path.ext = \"path/to/model.ext\",                         prop = 8, ## point to elements in THETA                         add = 9,  ## point to elements in THETA                         par.type = \"THETA\",                         log = FALSE)  }"},{"path":"https://philipdelff.github.io/NMsim/reference/callNonmemDirect.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate system command to call Nonmem directly — callNonmemDirect","title":"Generate system command to call Nonmem directly — callNonmemDirect","text":"Generate system command call Nonmem directly","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/callNonmemDirect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate system command to call Nonmem directly — callNonmemDirect","text":"","code":"callNonmemDirect(file.mod, path.nonmem)"},{"path":"https://philipdelff.github.io/NMsim/reference/checkTimes.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if file modification times indicate that Nonmem models should be re-run — checkTimes","title":"Test if file modification times indicate that Nonmem models should be re-run — checkTimes","text":"Test file modification times indicate Nonmem models re-run","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/checkTimes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if file modification times indicate that Nonmem models should be re-run — checkTimes","text":"","code":"checkTimes(   file.lst,   use.input = TRUE,   nminfo.input = NULL,   file.mod,   tz.lst = NULL )"},{"path":"https://philipdelff.github.io/NMsim/reference/checkTimes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if file modification times indicate that Nonmem models should be re-run — checkTimes","text":"file.lst output control stream. use.input Scan input data updates ? Default TRUE. nminfo.input want take account input data avoid re-reading information, can pass NMdata meta data object. file.mod input control stream tz.lst files moved around file systems, file modification time may reflective Nonmem runtime. case, can choose extract time stamp output control stream. issue Nonmem write time zone, pass checkTimes wanted.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/cleanStrings.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop spaces and odd characters — cleanStrings","title":"Drop spaces and odd characters — cleanStrings","text":"Drop spaces odd characters","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/cleanStrings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop spaces and odd characters — cleanStrings","text":"","code":"cleanStrings(x)"},{"path":"https://philipdelff.github.io/NMsim/reference/cleanStrings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop spaces and odd characters — cleanStrings","text":"x string clean","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/cleanStrings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop spaces and odd characters — cleanStrings","text":"","code":"NMsim:::cleanStrings(\"e w% # ff!l3:t,3?.csv\") #> [1] \"ew%ffl3t3.csv\" NMsim:::cleanStrings(\"3!?:#;<>=, {}|=g+&- .csv\") #> [1] \"3g.csv\""},{"path":"https://philipdelff.github.io/NMsim/reference/dt2mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data.table of parameter estimates to a matrix — dt2mat","title":"Convert a data.table of parameter estimates to a matrix — dt2mat","text":"Often needed using estimates Omega Sigma matrices calculations.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/dt2mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data.table of parameter estimates to a matrix — dt2mat","text":"","code":"dt2mat(pars)"},{"path":"https://philipdelff.github.io/NMsim/reference/dt2mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data.table of parameter estimates to a matrix — dt2mat","text":"pars data.table parameters like subjset parameter list returned NMreadExt.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/dtapply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply function and return a data.table — dtapply","title":"Apply function and return a data.table — dtapply","text":"convenience function returns data.table column representing input values column results. still experimental work many input structures.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/dtapply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply function and return a data.table — dtapply","text":"","code":"dtapply(X, FUN, ...)"},{"path":"https://philipdelff.github.io/NMsim/reference/dtapply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply function and return a data.table — dtapply","text":"... arguments passed lapply","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/dtapply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply function and return a data.table — dtapply","text":"data.table","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/dtapply.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Apply function and return a data.table — dtapply","text":"functions return vectors currently     supported. dtapply support functions return     data.frames.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/findUpdated.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter control streams to only those updated since last run — findUpdated","title":"Filter control streams to only those updated since last run — findUpdated","text":"Filter control streams updated since last run","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/findUpdated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter control streams to only those updated since last run — findUpdated","text":"","code":"findUpdated(mods)"},{"path":"https://philipdelff.github.io/NMsim/reference/findUpdated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter control streams to only those updated since last run — findUpdated","text":"mods list (input output) control streams consider","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/findUpdated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter control streams to only those updated since last run — findUpdated","text":"character vector paths found models","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/genPhiFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a .phi file for further simulation with Nonmem — genPhiFile","title":"Generate a .phi file for further simulation with Nonmem — genPhiFile","text":"typically used couple different situations. One number new subjects simulated ETAs reused subsequent simulations. Another internally NMsim simulating new subjects models estimated SAEM.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/genPhiFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a .phi file for further simulation with Nonmem — genPhiFile","text":"","code":"genPhiFile(data, file)"},{"path":"https://philipdelff.github.io/NMsim/reference/genPhiFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a .phi file for further simulation with Nonmem — genPhiFile","text":"data dataset contains \"ID\" ETAs. can obtained `NMdata::NMscanData`. file Path .phi file written.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/inputArchiveDefault.html","id":null,"dir":"Reference","previous_headings":"","what":"Default location of input archive file — inputArchiveDefault","title":"Default location of input archive file — inputArchiveDefault","text":"Default location input archive file","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/inputArchiveDefault.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default location of input archive file — inputArchiveDefault","text":"","code":"inputArchiveDefault(file)"},{"path":"https://philipdelff.github.io/NMsim/reference/inputArchiveDefault.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default location of input archive file — inputArchiveDefault","text":"file Path input output control stream.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/inputArchiveDefault.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default location of input archive file — inputArchiveDefault","text":"file name (character)","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/padZeros.html","id":null,"dir":"Reference","previous_headings":"","what":"pad zeros on integers — padZeros","title":"pad zeros on integers — padZeros","text":"pad zeros integers","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/padZeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pad zeros on integers — padZeros","text":"","code":"padZeros(x, nchars)"},{"path":"https://philipdelff.github.io/NMsim/reference/padZeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pad zeros on integers — padZeros","text":"x integers pad. can coded characters already. nchars Optional specification length character strings return. supplied, characters padded match length max value x.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/padZeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pad zeros on integers — padZeros","text":"character vector","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/readParsWide.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter data from csv — readParsWide","title":"Parameter data from csv — readParsWide","text":"Reads output table simpar returns long format data.table. format returned NMreadExt() can used NMsim.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/readParsWide.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter data from csv — readParsWide","text":"","code":"readParsWide(   data,   col.model = NULL,   strings.par.type = c(THETA = \"^T.*\", OMEGA = \"^O.*\", SIGMA = \"^S.\"),   as.fun )"},{"path":"https://philipdelff.github.io/NMsim/reference/readParsWide.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter data from csv — readParsWide","text":"data data.frame path delimited file read using `data.table::fread`. col.model Name model counter, default \"model\". provided name found data, created row counter. needed? row data represents set parameters, .e. model. long format result, model multiple rows. Hence, model identifier needed distinguish models results. strings.par.type Defines column names get associated THETA, OMEGA, SIGMA. Default look \"T\", \"O\", \"S\" starting letter. customizing, make sure column name matched one criterion. .fun default return data data.frame. Pass function (say tibble::as_tibble) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/readParsWide.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter data from csv — readParsWide","text":"long-format data.frame model parameters","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/readParsWide.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameter data from csv — readParsWide","text":"wide data format read `readParsWide` Nonmem     format. used bridge output tools     simpar, potentially PSN. function reads data \"wide\" parameters -     column parameter, one row per parameter set     \"model\". returns data set \"long\" model     parameters. long format contains id.model.par unique model-parameter identifier. row-identifier. model Model identifier. par.type (\"THETA\", \"OMEGA\", \"SIGMA\") j indexes parameters (j NA par.type==\"THETA\"). value parameter value parameter Nonmem-style parameter names. THETA1, OMEGA(1,1) etc. Notice inconsistent naming THETA vs others. name.wide column name wide data value taken columns \"measure variables\" read values      specified three regular expressions, called THETA, OMEGA, SIGMA. default three regular expressions associate column name starting \"T\" THETAs, \"O\" \"S\" followed anything means \"OMEGA\" \"SIGMA\". readParsWide extracts j indexes sequences digits column names. TH.1 TETA1, SG1.1 SIGMA(1,1).","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/readParsWide.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter data from csv — readParsWide","text":"","code":"if (FALSE) { tab.ext <- readParsCsv(\"simpartab.csv\") ## or tab.simpar <- fread(\"simpartab.csv\") tab.ext <- readParsCsv(tab.simpar) NMsim(...,method.sim=NMsim_VarCov,tab.ext=tab.ext) }"},{"path":"https://philipdelff.github.io/NMsim/reference/simPopEtas.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a population based on a Nonmem model — simPopEtas","title":"Generate a population based on a Nonmem model — simPopEtas","text":"Generate population based Nonmem model","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/simPopEtas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a population based on a Nonmem model — simPopEtas","text":"","code":"simPopEtas(file.mod, N, seed, file.phi, as.fun)"},{"path":"https://philipdelff.github.io/NMsim/reference/simPopEtas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a population based on a Nonmem model — simPopEtas","text":"file.mod Path input control stream N Number subjects generate seed Optional seed. passed `set.seed`. thing running `set.seed` just calling `simPopEtas()`. file.phi optional phi file write generated subjects . .fun default return data data.frame. Pass function (say `tibble::as_tibble`) .fun convert something else. data.tables wanted, use .fun=\"data.table\". default can configured using NMdataConf.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/simpleCharArg.html","id":null,"dir":"Reference","previous_headings":"","what":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","title":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","text":"Check variable single character string meeting specified requirements","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/simpleCharArg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","text":"","code":"simpleCharArg(name.arg, val.arg, default, accepted, lower = TRUE, clean = TRUE)"},{"path":"https://philipdelff.github.io/NMsim/reference/simpleCharArg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","text":"name.arg Name argument val.arg argument value default val.arg NULL, returned? accepted values allowed lower run tolower? clean clean white spaces?","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/simpleCharArg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","text":"resulting parameter value","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/simpleCharArg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check that a variable is a single character string meeting specified requirements — simpleCharArg","text":"Better options may available packages like     checkmate. function check parameter     value, also sets default value missing.","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/writeTextFile.html","id":null,"dir":"Reference","previous_headings":"","what":"Conveniently writeLines to file — writeTextFile","title":"Conveniently writeLines to file — writeTextFile","text":"Conveniently writeLines file","code":""},{"path":"https://philipdelff.github.io/NMsim/reference/writeTextFile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conveniently writeLines to file — writeTextFile","text":"","code":"writeTextFile(lines, file)"},{"path":"https://philipdelff.github.io/NMsim/reference/writeTextFile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conveniently writeLines to file — writeTextFile","text":"lines character lines write file file name path write ","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"nmsim-020","dir":"Changelog","previous_headings":"","what":"NMsim 0.2.0","title":"NMsim 0.2.0","text":"critical generally bugs found NMsim 0.1.0, NMsim 0.2.0 includes several improvements upgrades. interface feels smoother . want thank Ron Keizer feedback advice.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"new-features-0-2-0","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.2.0","text":"NMsim() much reduced improved messaging user. one model data set supplied generated, progress trackers shown starting Nonmem, waiting Nonmem finish, collecting simulation results. messages include information intermediate files final results files stored. NMexec() improved support estimation. method.execute=\"nmsim\" method.execute=\"psn\" work linux windows, even though less thoroughly tested windows. Thank Boris Grinshpun testing. Names files containing final results NMsim() renamed intuitive. previous _paths.rds now called _MetaData.rds. results, read compressed, file called _ResultsData.fst. Notice, files required fully recover simulation results. Thanks Brian Reilly discussions many design aspects. now possible provide specific parameters (THETA, OMEGA SIGMA) Nonmem simulation. NMsim() table simulations. See argument file.ext NMsim_VarCov’s argument ext. New arguments control seeds. NMsim can either use R’s set.seed generating seeds Nonmem. Detailed control seeds, including many include distribution random sources Nonmem, can controlled using seed.nm argument. way, user can add random processes estimated control stream. actual Nonmem seed values can also provided. method.sim=NMsim_typical() replaced argument typical=TRUE. means typical subject simulations can now combined simulations methods like NMsim_VarCov. NMsim() now adds column called sim carries name simulation defined name.sim argument. Several checks existence consistency files implemented. native Nonmem execution method now also works estimation. pnm files now saved model transparency.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"bugfixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.2.0","text":"Running rbind results NMsim throw errors. Thanks Simone Cassani reporting . Fixed. Using file name extensions .mod input control streams combination NMdataConf(file.mod) make NMsim fail. Thanks Brian Reilly reporting. Fixed.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"other-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"NMsim 0.2.0","text":"NMsim_known() renamed NMsim_EBE(). Generated control streams stripped “NMsim_” prefix. files located NMsim generated folders prefix uninformative. case multi-threaded (cluster) execution something went wrong NMexec() used write output files Nonmem current working directory. now written model execution directory clarity tidyness.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"nmsim-010","dir":"Changelog","previous_headings":"","what":"NMsim 0.1.0","title":"NMsim 0.1.0","text":"CRAN release: 2024-02-22 first time NMsim works Windows. may still limitations initial testing looks promising. Make sure set path.nonmem. See configuration vignette website: NMsim-config.html 0.1.0 also important upgrade solidifies way NMsim reads results simulations. addition important bug fixes, allows NMsim wait Nonmem complete simulations - even run cluster. means even large simulations NMsim can integrated scripts.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"new-features-0-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.1.0","text":"Works Windows - least features . NMsim() NMreadSim() now wait arguments controls wait Nonmem finish simulating. also work jobs sent cluster. NMsim() respects reuse.results argument. TRUE use results file file system. can used stead putting NMsim() calls inside -statement disable simulation read results file. NMsim() looks couple features provided control streams known able cause issues. Warnings issued found. addEVID2 new argument, EVID specify value EVID column . can useful sometimes use EVID=0 simulation records.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"bugfixes-0-1-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.1.0","text":"cases NMreadSim() get path right simulation results leading failures reading simulation results. Fixed.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"other-changes-0-1-0","dir":"Changelog","previous_headings":"","what":"Other changes","title":"NMsim 0.1.0","text":"Functions NMreadExt NMreadPhi removed NMsim. live maintained NMdata package. NMsim, deprecated unmaintained functions.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"nmsim-0010","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.10","title":"NMsim 0.0.10","text":"CRAN release: 2024-02-08 NMsim 0.0.9 unfortunate bug NMreadSim() fixed. bugfix difference 0.0.9 0.0.10.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"nmsim-009","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.9","title":"NMsim 0.0.9","text":"CRAN release: 2024-02-07 NMsim 0.0.9 almost identical 0.0.8 ensures compatibility older R versions.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"bugfixes-0-0-9","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.0.9","text":"cases NMreadSim able read combine results models returned different data variables. Fixed.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"nmsim-008","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.8","title":"NMsim 0.0.8","text":"CRAN release: 2024-02-07","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"new-features-0-0-8","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.0.8","text":"NMsim 0.0.7 generate rds file paths simulation files results model+data set simulated. changed now generate one table per model. makes simpler read simulation results cases. NMreadSim now best way user read NMsim simulation results. interprets rds files (ones intended reading), fst files, tables NMsim runs, NMsim results. makes less confusing can processed NMreadSim also sometimes easier generalize code reading simulation results. Also, NMsim now always reads results using NMreadSim. advantage fst file always produced NMsim waits read results. NMreadSim new argument, check.time default disabling checking whether collected fst file newer results files generated NMsim. Normally, ’s good thing check ways sharing file files may retain file modification times needed check . NMsim delete fst files finds normally problem skip check. NMsim now tries reuse stored results reuse.results=TRUE. simple way - exist, attempted read - careful rerun simulations without option change arguments. transform option integrated table simulations created NMsim(). means even results read NMsim (simulation executed submitted cluster), transformation still applied NMreadSim() later. NMsim()'s dir.sims dir.res arguments can controlled using NMdata::NMdataConf(). Often two arguments used time, ’s convenient able configure script.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"bugfixes-0-0-8","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.0.8","text":"NMreadSim able read results current working directory NMsim executed. Now fixed. cases NMsim fail models multiple output tables table.vars argument used. Fixed. NMsim’s sim.dir..scratch argument respected due simple bug, leading dir.sims growing time simulation rerun. case simulation data list data sets NMsim order columns order.columns TRUE. Now fixed. case lists data sets, list element (data set) names included spaces, NMsim() throw error. Spaces data set names now replaced scores (“_“) avoid . often happen data sets split lists using data.table::split.data.table() - excellent way , way. Function simPopEtas() exported, available NMsim:::simPopEtas(). Fixed.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"nmsim-007","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.7","title":"NMsim 0.0.7","text":"CRAN release: 2024-01-08","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"new-features-0-0-7","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.0.7","text":"Function simPopEtas() generate population model. population can saved phi file reused subsequent simulations. function mistake exported 0.0.7 now must use NMsim:::simPopEtas() use . Function NMreadSim() provides simple interface reading simulation results. Especailly cases simulation parallelized otherwise spawns multiple Nonmem jobs, useful feature. list simulation data sets now simulated separate Nonmem runs. efficient way parellelize large simulation runs.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"nmsim-006","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.6","title":"NMsim 0.0.6","text":"CRAN release: 2023-11-28","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"new-features-0-0-6","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.0.6","text":"Support parallelization simulations added using PSN. used possible run multiple simulations simultaneously separate threads. Now single simulation runs can parallelized sge type clusters (using qsub). See arguments sge nc.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"bugfixes-0-0-6","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"NMsim 0.0.6","text":"simple mistake create problems genPhiFile() 10 ETAs model. Now fixed.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"nmsim-005","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.5","title":"NMsim 0.0.5","text":"CRAN release: 2023-11-11","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"new-features-0-0-5","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.0.5","text":"Full support models estimated SAEM. Especially, simulation “known” subjects, .e. re-using emperical Bayes estimates, slightly different models. Experimental support windows PsN. dir.psn argument point directory executables execute update_inits found. Thanks Sjoerd Koopman debugging testing . Hopefully future versions, PsN needed Windows (like needed Linux). simulation method called NMsim_known now accepts .phi files use .phi file generated estimation run. useful one wants reuse subjects generated previous simulation.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"otherminor-improvements-0-0-5","dir":"Changelog","previous_headings":"","what":"Other/minor improvements","title":"NMsim 0.0.5","text":"NMexec now also copies shk (shrinkage estimates) file run. files default copied reported next control streams now xml, ext, cov, cor, coi, phi, shk - addition output table files archived input data course.","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"nmsim-002","dir":"Changelog","previous_headings":"","what":"NMsim 0.0.2","title":"NMsim 0.0.2","text":"CRAN release: 2023-09-14","code":""},{"path":"https://philipdelff.github.io/NMsim/news/index.html","id":"new-features-0-0-2","dir":"Changelog","previous_headings":"","what":"New features","title":"NMsim 0.0.2","text":"NMsim supports type.sim=\"typical\" means OMEGAS fixed zero. requires ext file present. Experimental support simulation estimated subjects using type.sim=\"known\".","code":""}]
